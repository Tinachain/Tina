// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package boker_contract

import (
	"math/big"
	"strings"

	"github.com/Tinachain/Tina/chain/accounts/abi"
	"github.com/Tinachain/Tina/chain/accounts/abi/bind"
	"github.com/Tinachain/Tina/chain/common"
	"github.com/Tinachain/Tina/chain/core/types"
)

// BokerNodeABI is the input ABI used to generate the binding from.
const BokerNodeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"tickets\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rotateVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cName\",\"type\":\"string\"}],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrCandidate\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"team\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrVoter\",\"type\":\"address\"}],\"name\":\"cancelAllVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"globalConfigString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bokerManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrCandidate\",\"type\":\"address\"}],\"name\":\"getCandidate\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"team\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"globalConfigInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrVoter\",\"type\":\"address\"},{\"name\":\"addrCandidate\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteRound\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addrManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// BokerNodeBin is the compiled bytecode used for deploying new contracts.
const BokerNodeBin = `60806040526040805190810160405280600581526020017f312e302e3100000000000000000000000000000000000000000000000000000081525060019080519060200190620000519291906200024b565b50426002553480156200006357600080fd5b50604051602080620045b58339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000e281620000ea640100000000026401000000009004565b5050620002fa565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663519c28826040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050506040513d60208110156200018057600080fd5b8101908080519060200190929190505050151562000206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f7420426f6b65724d616e616765722100000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028e57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002be578251825591602001919060010190620002a1565b5b509050620002ce9190620002d2565b5090565b620002f791905b80821115620002f3576000816000905550600101620002d9565b5090565b90565b6142ab806200030a6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306a49fce146100f657806311070fcd146101aa5780631eb726af146101c157806321b3f5281461026a578063281c231b146102f5578063378298bc1461033857806354fd4d501461041a57806361dcd7ab146104aa57806366ebc1c6146104d55780638da5cb5b1461052c578063b0417e9814610583578063b7adcf1d146105b2578063d0ebdbe71461074d578063d43c802114610790578063efa5d4311461080d578063f05075731461087a578063f2fde38b146108a5575b600080fd5b34801561010257600080fd5b5061010b6108e8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610152578082015181840152602081019050610137565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610194578082015181840152602081019050610179565b5050505090500194505050505060405180910390f35b3480156101b657600080fd5b506101bf610a74565b005b3480156101cd57600080fd5b50610228600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ff4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027657600080fd5b506102f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293905050506112a2565b005b34801561030157600080fd5b50610336600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611855565b005b34801561034457600080fd5b5061039f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612102565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103df5780820151818401526020810190506103c4565b50505050905090810190601f16801561040c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042657600080fd5b5061042f612292565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046f578082015181840152602081019050610454565b50505050905090810190601f16801561049c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104b657600080fd5b506104bf612330565b6040518082815260200191505060405180910390f35b3480156104e157600080fd5b506104ea612336565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053857600080fd5b5061054161235c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058f57600080fd5b50610598612381565b604051808215151515815260200191505060405180910390f35b3480156105be57600080fd5b506105f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123a2565b60405180806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015610641578082015181840152602081019050610626565b50505050905090810190601f16801561066e5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b838110156106a757808201518184015260208101905061068c565b50505050905090810190601f1680156106d45780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b8381101561070d5780820151818401526020810190506106f2565b50505050905090810190601f16801561073a5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561075957600080fd5b5061078e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125cc565b005b34801561079c57600080fd5b506107f7600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612633565b6040518082815260200191505060405180910390f35b34801561081957600080fd5b50610878600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061276d565b005b34801561088657600080fd5b5061088f61317e565b6040518082815260200191505060405180910390f35b3480156108b157600080fd5b506108e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613261565b005b6060806109296040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff166306a49fce6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156109ca57600080fd5b8101908080516401000000008111156109e257600080fd5b828101905060208101848111156109f857600080fd5b8151856020820283011164010000000082111715610a1557600080fd5b50509291906020018051640100000000811115610a3157600080fd5b82810190506020810184811115610a4757600080fd5b8151856020820283011164010000000082111715610a6457600080fd5b5050929190505050915091509091565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610b89578082015181840152602081019050610b6e565b50505050905090810190601f168015610bb65780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610bd657600080fd5b505af1158015610bea573d6000803e3d6000fd5b505050506040513d6020811015610c0057600080fd5b810190808051906020019092919050505080610db25750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610d29578082015181840152602081019050610d0e565b50505050905090810190601f168015610d565780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610d7657600080fd5b505af1158015610d8a573d6000803e3d6000fd5b505050506040513d6020811015610da057600080fd5b81019080805190602001909291905050505b1515610e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b610e2e6132c8565b1515610e3957610ff0565b610e41613403565b610e7f6040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b91508173ffffffffffffffffffffffffffffffffffffffff166365fc42ce6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050506040513d6020811015610f0f57600080fd5b81019080805190602001909291905050509050610f2a613a92565b50610f696040805190810160405280600881526020017f426f6b65724c6f67000000000000000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663c7de6c91826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015610fd757600080fd5b505af1158015610feb573d6000803e3d6000fd5b505050505b5050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca1f3c1846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110a1578082015181840152602081019050611086565b50505050905090810190601f1680156110ce5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156110ed57600080fd5b505af1158015611101573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561112b57600080fd5b8101908080519060200190929190805164010000000081111561114d57600080fd5b8281019050602081018481111561116357600080fd5b815185600182028301116401000000008211171561118057600080fd5b50509291906020018051906020019092919080516401000000008111156111a657600080fd5b828101905060208101848111156111bc57600080fd5b81518560018202830111640100000000821117156111d957600080fd5b505092919060200180519060200190929190505050505092505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f616464722069732030210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156113b4578082015181840152602081019050611399565b50505050905090810190601f1680156113e15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b505050506040513d602081101561142b57600080fd5b8101908080519060200190929190505050806115dd5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611554578082015181840152602081019050611539565b50505050905090810190601f1680156115815780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050506040513d60208110156115cb57600080fd5b81019080805190602001909291905050505b1515611651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515156116f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6164647243616e6469646174652069732030000000000000000000000000000081525060200191505060405180910390fd5b6117346040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff16630df7afab888888888888886040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200184810384528a8a82818152602001925080828437820191505084810383528888828181526020019250808284378201915050848103825286868281815260200192508082843782019150509a5050505050505050505050600060405180830381600087803b15801561183457600080fd5b505af1158015611848573d6000803e3d6000fd5b5050505050505050505050565b6000606080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561196f578082015181840152602081019050611954565b50505050905090810190601f16801561199c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156119bc57600080fd5b505af11580156119d0573d6000803e3d6000fd5b505050506040513d60208110156119e657600080fd5b810190808051906020019092919050505080611b985750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611b0f578082015181840152602081019050611af4565b50505050905090810190601f168015611b3c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611b5c57600080fd5b505af1158015611b70573d6000803e3d6000fd5b505050506040513d6020811015611b8657600080fd5b81019080805190602001909291905050505b1515611c0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b611c4a6040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b94508473ffffffffffffffffffffffffffffffffffffffff1663dc1e30da876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611ce757600080fd5b505af1158015611cfb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506080811015611d2557600080fd5b810190808051640100000000811115611d3d57600080fd5b82810190506020810184811115611d5357600080fd5b8151856020820283011164010000000082111715611d7057600080fd5b50509291906020018051640100000000811115611d8c57600080fd5b82810190506020810184811115611da257600080fd5b8151856020820283011164010000000082111715611dbf57600080fd5b505092919060200180519060200190929190805190602001909291905050509350935093509350611df1868585613d40565b8473ffffffffffffffffffffffffffffffffffffffff1663c90f008a8760006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611e9557600080fd5b505af1158015611ea9573d6000803e3d6000fd5b50505050611eeb6040805190810160405280600c81526020017f426f6b657246696e616e63650000000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663f4d2cbb4878360046007811115611f1557fe5b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015611fa157600080fd5b505af1158015611fb5573d6000803e3d6000fd5b50505050611ff76040805190810160405280600881526020017f426f6b65724c6f67000000000000000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663e7f218f28760006001600281111561202257fe5b856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b1580156120e257600080fd5b505af11580156120f6573d6000803e3d6000fd5b50505050505050505050565b6060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a189f35836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121ae578082015181840152602081019050612193565b50505050905090810190601f1680156121db5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156121fa57600080fd5b505af115801561220e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561223857600080fd5b81019080805164010000000081111561225057600080fd5b8281019050602081018481111561226657600080fd5b815185600182028301116401000000008211171561228357600080fd5b50509291905050509050919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123285780601f106122fd57610100808354040283529160200191612328565b820191906000526020600020905b81548152906001019060200180831161230b57829003601f168201915b505050505081565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061238b6132c8565b151561239a576000905061239f565b600190505b90565b606080606060006123e76040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663b7adcf1d866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561248157600080fd5b505af1158015612495573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060808110156124bf57600080fd5b8101908080516401000000008111156124d757600080fd5b828101905060208101848111156124ed57600080fd5b815185600182028301116401000000008211171561250a57600080fd5b5050929190602001805164010000000081111561252657600080fd5b8281019050602081018481111561253c57600080fd5b815185600182028301116401000000008211171561255957600080fd5b5050929190602001805164010000000081111561257557600080fd5b8281019050602081018481111561258b57600080fd5b81518560018202830111640100000000821117156125a857600080fd5b50509291906020018051906020019092919050505093509350935093509193509193565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561262757600080fd5b61263081613f80565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633230b078836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126df5780820151818401526020810190506126c4565b50505050905090810190601f16801561270c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561272b57600080fd5b505af115801561273f573d6000803e3d6000fd5b505050506040513d602081101561275557600080fd5b81019080805190602001909291905050509050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612881578082015181840152602081019050612866565b50505050905090810190601f1680156128ae5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156128ce57600080fd5b505af11580156128e2573d6000803e3d6000fd5b505050506040513d60208110156128f857600080fd5b810190808051906020019092919050505080612aaa5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612a21578082015181840152602081019050612a06565b50505050905090810190601f168015612a4e5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612a6e57600080fd5b505af1158015612a82573d6000803e3d6000fd5b505050506040513d6020811015612a9857600080fd5b81019080805190602001909291905050505b1515612b1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b612b5c6040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b90508073ffffffffffffffffffffffffffffffffffffffff166317132a0f846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612bf957600080fd5b505af1158015612c0d573d6000803e3d6000fd5b505050506040513d6020811015612c2357600080fd5b81019080805190602001909291905050501515612ca8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6164647243616e646964617465206e6f7420666f756e6421000000000000000081525060200191505060405180910390fd5b600082111515612d20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f746f6b656e73203c3d203021000000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663424b0baf85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612dc357600080fd5b505af1158015612dd7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16630c9f51088585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015612eb257600080fd5b505af1158015612ec6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639814be53856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015612f6557600080fd5b505af1158015612f79573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16633e26a5a984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561302057600080fd5b505af1158015613034573d6000803e3d6000fd5b505050506130766040805190810160405280600881526020017f426f6b65724c6f67000000000000000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663e7f218f28585600060028111156130a057fe5b866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b15801561316057600080fd5b505af1158015613174573d6000803e3d6000fd5b5050505050505050565b60006131be6040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff166365fc42ce6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561322157600080fd5b505af1158015613235573d6000803e3d6000fd5b505050506040513d602081101561324b57600080fd5b8101908080519060200190929190505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156132bc57600080fd5b6132c5816140dd565b50565b6000806133096040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b90504261334a6040805190810160405280600f81526020017f566f74654379636c65506572696f640000000000000000000000000000000000815250612633565b8273ffffffffffffffffffffffffffffffffffffffff1663b9c25a6d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156133ae57600080fd5b505af11580156133c2573d6000803e3d6000fd5b505050506040513d60208110156133d857600080fd5b8101908080519060200190929190505050011115156133fa57600191506133ff565b600091505b5090565b6000606060008060006060806000806134506040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b98508873ffffffffffffffffffffffffffffffffffffffff1663cdd722536040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156134b657600080fd5b505af11580156134ca573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156134f457600080fd5b81019080805164010000000081111561350c57600080fd5b8281019050602081018481111561352257600080fd5b815185602082028301116401000000008211171561353f57600080fd5b5050929190505050975087519650600095505b86861015613a8757878681518110151561356857fe5b9060200190602002015194508873ffffffffffffffffffffffffffffffffffffffff1663dc1e30da866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561360f57600080fd5b505af1158015613623573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250608081101561364d57600080fd5b81019080805164010000000081111561366557600080fd5b8281019050602081018481111561367b57600080fd5b815185602082028301116401000000008211171561369857600080fd5b505092919060200180516401000000008111156136b457600080fd5b828101905060208101848111156136ca57600080fd5b81518560208202830111640100000000821117156136e757600080fd5b50509291906020018051906020019092919080519060200190929190505050935093509350935061374c6040805190810160405280601381526020017f566f7465556e6c6f636b507265636973696f6e00000000000000000000000000815250612633565b61375f42846141d790919063ffffffff16565b111515613a7a57613771858585613d40565b8873ffffffffffffffffffffffffffffffffffffffff1663c90f008a8660006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561381557600080fd5b505af1158015613829573d6000803e3d6000fd5b5050505061386b6040805190810160405280600c81526020017f426f6b657246696e616e63650000000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663f4d2cbb486836005600781111561389557fe5b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b15801561392157600080fd5b505af1158015613935573d6000803e3d6000fd5b505050506139776040805190810160405280600881526020017f426f6b65724c6f67000000000000000000000000000000000000000000000000815250610ff4565b73ffffffffffffffffffffffffffffffffffffffff1663e7f218f28660006002808111156139a157fe5b856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b158015613a6157600080fd5b505af1158015613a75573d6000803e3d6000fd5b505050505b8580600101965050613552565b505050505050505050565b6000806000806000613ad86040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b93508373ffffffffffffffffffffffffffffffffffffffff1663b9c25a6d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613b3e57600080fd5b505af1158015613b52573d6000803e3d6000fd5b505050506040513d6020811015613b6857600080fd5b81019080805190602001909291905050509250613bb96040805190810160405280600f81526020017f566f74654379636c65506572696f640000000000000000000000000000000000815250612633565b9150613be082613bd285426141f790919063ffffffff16565b61421090919063ffffffff16565b90508373ffffffffffffffffffffffffffffffffffffffff1663e107f9ec613c23613c14858561422690919063ffffffff16565b8661426190919063ffffffff16565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015613c7557600080fd5b505af1158015613c89573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16639a5074a4826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015613cfc57600080fd5b505af1158015613d10573d6000803e3d6000fd5b505050506040513d6020811015613d2657600080fd5b810190808051906020019092919050505094505050505090565b600080600080613d846040805190810160405280600d81526020017f426f6b65724e6f64654461746100000000000000000000000000000000000000815250610ff4565b9350600092505b8551831015613f77578583815181101515613da257fe5b9060200190602002015191508483815181101515613dbc57fe5b9060200190602002015190508373ffffffffffffffffffffffffffffffffffffffff1663a7a6586a88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015613e9757600080fd5b505af1158015613eab573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e13e6ffe83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613f5257600080fd5b505af1158015613f66573d6000803e3d6000fd5b505050508280600101935050613d8b565b50505050505050565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663519c28826040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613fe957600080fd5b505af1158015613ffd573d6000803e3d6000fd5b505050506040513d602081101561401357600080fd5b81019080805190602001909291905050501515614098576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f7420426f6b65724d616e616765722100000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561411957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000818311156141eb5781830390506141f1565b82820390505b92915050565b600082821115151561420557fe5b818303905092915050565b6000818381151561421d57fe5b04905092915050565b600080600084141561423b576000915061425a565b828402905082848281151561424c57fe5b0414151561425657fe5b8091505b5092915050565b600080828401905083811015151561427557fe5b80915050929150505600a165627a7a723058200505fdb81a29e2a403c585bc91291ebb369f9f652d1522ae4d33fdc5ea299e680029`

// DeployBokerNode deploys a new Ethereum contract, binding an instance of BokerNode to it.
func DeployBokerNode(auth *bind.TransactOpts, backend bind.ContractBackend, addrManager common.Address) (common.Address, *types.Transaction, *BokerNode, error) {
	parsed, err := abi.JSON(strings.NewReader(BokerNodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BokerNodeBin), backend, addrManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BokerNode{BokerNodeCaller: BokerNodeCaller{contract: contract}, BokerNodeTransactor: BokerNodeTransactor{contract: contract}}, nil
}

// BokerNode is an auto generated Go binding around an Ethereum contract.
type BokerNode struct {
	BokerNodeCaller     // Read-only binding to the contract
	BokerNodeTransactor // Write-only binding to the contract
}

// BokerNodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BokerNodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BokerNodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BokerNodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BokerNodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BokerNodeSession struct {
	Contract     *BokerNode        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BokerNodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BokerNodeCallerSession struct {
	Contract *BokerNodeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// BokerNodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BokerNodeTransactorSession struct {
	Contract     *BokerNodeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BokerNodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BokerNodeRaw struct {
	Contract *BokerNode // Generic contract binding to access the raw methods on
}

// BokerNodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BokerNodeCallerRaw struct {
	Contract *BokerNodeCaller // Generic read-only contract binding to access the raw methods on
}

// BokerNodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BokerNodeTransactorRaw struct {
	Contract *BokerNodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBokerNode creates a new instance of BokerNode, bound to a specific deployed contract.
func NewBokerNode(address common.Address, backend bind.ContractBackend) (*BokerNode, error) {
	contract, err := bindBokerNode(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BokerNode{BokerNodeCaller: BokerNodeCaller{contract: contract}, BokerNodeTransactor: BokerNodeTransactor{contract: contract}}, nil
}

// NewBokerNodeCaller creates a new read-only instance of BokerNode, bound to a specific deployed contract.
func NewBokerNodeCaller(address common.Address, caller bind.ContractCaller) (*BokerNodeCaller, error) {
	contract, err := bindBokerNode(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &BokerNodeCaller{contract: contract}, nil
}

// NewBokerNodeTransactor creates a new write-only instance of BokerNode, bound to a specific deployed contract.
func NewBokerNodeTransactor(address common.Address, transactor bind.ContractTransactor) (*BokerNodeTransactor, error) {
	contract, err := bindBokerNode(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &BokerNodeTransactor{contract: contract}, nil
}

// bindBokerNode binds a generic wrapper to an already deployed contract.
func bindBokerNode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BokerNodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BokerNode *BokerNodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BokerNode.Contract.BokerNodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BokerNode *BokerNodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerNode.Contract.BokerNodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BokerNode *BokerNodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BokerNode.Contract.BokerNodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BokerNode *BokerNodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BokerNode.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BokerNode *BokerNodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerNode.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BokerNode *BokerNodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BokerNode.Contract.contract.Transact(opts, method, params...)
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerNode *BokerNodeCaller) BokerManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "bokerManager")
	return *ret0, err
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerNode *BokerNodeSession) BokerManager() (common.Address, error) {
	return _BokerNode.Contract.BokerManager(&_BokerNode.CallOpts)
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerNode *BokerNodeCallerSession) BokerManager() (common.Address, error) {
	return _BokerNode.Contract.BokerManager(&_BokerNode.CallOpts)
}

// CheckVote is a free data retrieval call binding the contract method 0xb0417e98.
//
// Solidity: function checkVote() constant returns(bool)
func (_BokerNode *BokerNodeCaller) CheckVote(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "checkVote")
	return *ret0, err
}

// CheckVote is a free data retrieval call binding the contract method 0xb0417e98.
//
// Solidity: function checkVote() constant returns(bool)
func (_BokerNode *BokerNodeSession) CheckVote() (bool, error) {
	return _BokerNode.Contract.CheckVote(&_BokerNode.CallOpts)
}

// CheckVote is a free data retrieval call binding the contract method 0xb0417e98.
//
// Solidity: function checkVote() constant returns(bool)
func (_BokerNode *BokerNodeCallerSession) CheckVote() (bool, error) {
	return _BokerNode.Contract.CheckVote(&_BokerNode.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerNode *BokerNodeCaller) ContractAddress(opts *bind.CallOpts, cName string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "contractAddress", cName)
	return *ret0, err
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerNode *BokerNodeSession) ContractAddress(cName string) (common.Address, error) {
	return _BokerNode.Contract.ContractAddress(&_BokerNode.CallOpts, cName)
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerNode *BokerNodeCallerSession) ContractAddress(cName string) (common.Address, error) {
	return _BokerNode.Contract.ContractAddress(&_BokerNode.CallOpts, cName)
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerNode *BokerNodeCaller) CreateTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "createTime")
	return *ret0, err
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerNode *BokerNodeSession) CreateTime() (*big.Int, error) {
	return _BokerNode.Contract.CreateTime(&_BokerNode.CallOpts)
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerNode *BokerNodeCallerSession) CreateTime() (*big.Int, error) {
	return _BokerNode.Contract.CreateTime(&_BokerNode.CallOpts)
}

// GetCandidate is a free data retrieval call binding the contract method 0xb7adcf1d.
//
// Solidity: function getCandidate(addrCandidate address) constant returns(description string, team string, name string, tickets uint256)
func (_BokerNode *BokerNodeCaller) GetCandidate(opts *bind.CallOpts, addrCandidate common.Address) (struct {
	Description string
	Team        string
	Name        string
	Tickets     *big.Int
}, error) {
	ret := new(struct {
		Description string
		Team        string
		Name        string
		Tickets     *big.Int
	})
	out := ret
	err := _BokerNode.contract.Call(opts, out, "getCandidate", addrCandidate)
	return *ret, err
}

// GetCandidate is a free data retrieval call binding the contract method 0xb7adcf1d.
//
// Solidity: function getCandidate(addrCandidate address) constant returns(description string, team string, name string, tickets uint256)
func (_BokerNode *BokerNodeSession) GetCandidate(addrCandidate common.Address) (struct {
	Description string
	Team        string
	Name        string
	Tickets     *big.Int
}, error) {
	return _BokerNode.Contract.GetCandidate(&_BokerNode.CallOpts, addrCandidate)
}

// GetCandidate is a free data retrieval call binding the contract method 0xb7adcf1d.
//
// Solidity: function getCandidate(addrCandidate address) constant returns(description string, team string, name string, tickets uint256)
func (_BokerNode *BokerNodeCallerSession) GetCandidate(addrCandidate common.Address) (struct {
	Description string
	Team        string
	Name        string
	Tickets     *big.Int
}, error) {
	return _BokerNode.Contract.GetCandidate(&_BokerNode.CallOpts, addrCandidate)
}

// GetCandidates is a free data retrieval call binding the contract method 0x06a49fce.
//
// Solidity: function getCandidates() constant returns(addresses address[], tickets uint256[])
func (_BokerNode *BokerNodeCaller) GetCandidates(opts *bind.CallOpts) (struct {
	Addresses []common.Address
	Tickets   []*big.Int
}, error) {
	ret := new(struct {
		Addresses []common.Address
		Tickets   []*big.Int
	})
	out := ret
	err := _BokerNode.contract.Call(opts, out, "getCandidates")
	return *ret, err
}

// GetCandidates is a free data retrieval call binding the contract method 0x06a49fce.
//
// Solidity: function getCandidates() constant returns(addresses address[], tickets uint256[])
func (_BokerNode *BokerNodeSession) GetCandidates() (struct {
	Addresses []common.Address
	Tickets   []*big.Int
}, error) {
	return _BokerNode.Contract.GetCandidates(&_BokerNode.CallOpts)
}

// GetCandidates is a free data retrieval call binding the contract method 0x06a49fce.
//
// Solidity: function getCandidates() constant returns(addresses address[], tickets uint256[])
func (_BokerNode *BokerNodeCallerSession) GetCandidates() (struct {
	Addresses []common.Address
	Tickets   []*big.Int
}, error) {
	return _BokerNode.Contract.GetCandidates(&_BokerNode.CallOpts)
}

// GetVoteRound is a free data retrieval call binding the contract method 0xf0507573.
//
// Solidity: function getVoteRound() constant returns(round uint256)
func (_BokerNode *BokerNodeCaller) GetVoteRound(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "getVoteRound")
	return *ret0, err
}

// GetVoteRound is a free data retrieval call binding the contract method 0xf0507573.
//
// Solidity: function getVoteRound() constant returns(round uint256)
func (_BokerNode *BokerNodeSession) GetVoteRound() (*big.Int, error) {
	return _BokerNode.Contract.GetVoteRound(&_BokerNode.CallOpts)
}

// GetVoteRound is a free data retrieval call binding the contract method 0xf0507573.
//
// Solidity: function getVoteRound() constant returns(round uint256)
func (_BokerNode *BokerNodeCallerSession) GetVoteRound() (*big.Int, error) {
	return _BokerNode.Contract.GetVoteRound(&_BokerNode.CallOpts)
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerNode *BokerNodeCaller) GlobalConfigInt(opts *bind.CallOpts, key string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "globalConfigInt", key)
	return *ret0, err
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerNode *BokerNodeSession) GlobalConfigInt(key string) (*big.Int, error) {
	return _BokerNode.Contract.GlobalConfigInt(&_BokerNode.CallOpts, key)
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerNode *BokerNodeCallerSession) GlobalConfigInt(key string) (*big.Int, error) {
	return _BokerNode.Contract.GlobalConfigInt(&_BokerNode.CallOpts, key)
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerNode *BokerNodeCaller) GlobalConfigString(opts *bind.CallOpts, key string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "globalConfigString", key)
	return *ret0, err
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerNode *BokerNodeSession) GlobalConfigString(key string) (string, error) {
	return _BokerNode.Contract.GlobalConfigString(&_BokerNode.CallOpts, key)
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerNode *BokerNodeCallerSession) GlobalConfigString(key string) (string, error) {
	return _BokerNode.Contract.GlobalConfigString(&_BokerNode.CallOpts, key)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerNode *BokerNodeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerNode *BokerNodeSession) Owner() (common.Address, error) {
	return _BokerNode.Contract.Owner(&_BokerNode.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerNode *BokerNodeCallerSession) Owner() (common.Address, error) {
	return _BokerNode.Contract.Owner(&_BokerNode.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerNode *BokerNodeCaller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BokerNode.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerNode *BokerNodeSession) Version() (string, error) {
	return _BokerNode.Contract.Version(&_BokerNode.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerNode *BokerNodeCallerSession) Version() (string, error) {
	return _BokerNode.Contract.Version(&_BokerNode.CallOpts)
}

// CancelAllVotes is a paid mutator transaction binding the contract method 0x281c231b.
//
// Solidity: function cancelAllVotes(addrVoter address) returns()
func (_BokerNode *BokerNodeTransactor) CancelAllVotes(opts *bind.TransactOpts, addrVoter common.Address) (*types.Transaction, error) {
	return _BokerNode.contract.Transact(opts, "cancelAllVotes", addrVoter)
}

// CancelAllVotes is a paid mutator transaction binding the contract method 0x281c231b.
//
// Solidity: function cancelAllVotes(addrVoter address) returns()
func (_BokerNode *BokerNodeSession) CancelAllVotes(addrVoter common.Address) (*types.Transaction, error) {
	return _BokerNode.Contract.CancelAllVotes(&_BokerNode.TransactOpts, addrVoter)
}

// CancelAllVotes is a paid mutator transaction binding the contract method 0x281c231b.
//
// Solidity: function cancelAllVotes(addrVoter address) returns()
func (_BokerNode *BokerNodeTransactorSession) CancelAllVotes(addrVoter common.Address) (*types.Transaction, error) {
	return _BokerNode.Contract.CancelAllVotes(&_BokerNode.TransactOpts, addrVoter)
}

// RegisterCandidate is a paid mutator transaction binding the contract method 0x21b3f528.
//
// Solidity: function registerCandidate(addrCandidate address, description string, team string, name string) returns()
func (_BokerNode *BokerNodeTransactor) RegisterCandidate(opts *bind.TransactOpts, addrCandidate common.Address, description string, team string, name string) (*types.Transaction, error) {
	return _BokerNode.contract.Transact(opts, "registerCandidate", addrCandidate, description, team, name)
}

// RegisterCandidate is a paid mutator transaction binding the contract method 0x21b3f528.
//
// Solidity: function registerCandidate(addrCandidate address, description string, team string, name string) returns()
func (_BokerNode *BokerNodeSession) RegisterCandidate(addrCandidate common.Address, description string, team string, name string) (*types.Transaction, error) {
	return _BokerNode.Contract.RegisterCandidate(&_BokerNode.TransactOpts, addrCandidate, description, team, name)
}

// RegisterCandidate is a paid mutator transaction binding the contract method 0x21b3f528.
//
// Solidity: function registerCandidate(addrCandidate address, description string, team string, name string) returns()
func (_BokerNode *BokerNodeTransactorSession) RegisterCandidate(addrCandidate common.Address, description string, team string, name string) (*types.Transaction, error) {
	return _BokerNode.Contract.RegisterCandidate(&_BokerNode.TransactOpts, addrCandidate, description, team, name)
}

// RotateVote is a paid mutator transaction binding the contract method 0x11070fcd.
//
// Solidity: function rotateVote() returns()
func (_BokerNode *BokerNodeTransactor) RotateVote(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerNode.contract.Transact(opts, "rotateVote")
}

// RotateVote is a paid mutator transaction binding the contract method 0x11070fcd.
//
// Solidity: function rotateVote() returns()
func (_BokerNode *BokerNodeSession) RotateVote() (*types.Transaction, error) {
	return _BokerNode.Contract.RotateVote(&_BokerNode.TransactOpts)
}

// RotateVote is a paid mutator transaction binding the contract method 0x11070fcd.
//
// Solidity: function rotateVote() returns()
func (_BokerNode *BokerNodeTransactorSession) RotateVote() (*types.Transaction, error) {
	return _BokerNode.Contract.RotateVote(&_BokerNode.TransactOpts)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerNode *BokerNodeTransactor) SetManager(opts *bind.TransactOpts, addrManager common.Address) (*types.Transaction, error) {
	return _BokerNode.contract.Transact(opts, "setManager", addrManager)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerNode *BokerNodeSession) SetManager(addrManager common.Address) (*types.Transaction, error) {
	return _BokerNode.Contract.SetManager(&_BokerNode.TransactOpts, addrManager)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerNode *BokerNodeTransactorSession) SetManager(addrManager common.Address) (*types.Transaction, error) {
	return _BokerNode.Contract.SetManager(&_BokerNode.TransactOpts, addrManager)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerNode *BokerNodeTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _BokerNode.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerNode *BokerNodeSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _BokerNode.Contract.TransferOwnership(&_BokerNode.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerNode *BokerNodeTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _BokerNode.Contract.TransferOwnership(&_BokerNode.TransactOpts, _newOwner)
}

// Vote is a paid mutator transaction binding the contract method 0xefa5d431.
//
// Solidity: function vote(addrVoter address, addrCandidate address, tokens uint256) returns()
func (_BokerNode *BokerNodeTransactor) Vote(opts *bind.TransactOpts, addrVoter common.Address, addrCandidate common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _BokerNode.contract.Transact(opts, "vote", addrVoter, addrCandidate, tokens)
}

// Vote is a paid mutator transaction binding the contract method 0xefa5d431.
//
// Solidity: function vote(addrVoter address, addrCandidate address, tokens uint256) returns()
func (_BokerNode *BokerNodeSession) Vote(addrVoter common.Address, addrCandidate common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _BokerNode.Contract.Vote(&_BokerNode.TransactOpts, addrVoter, addrCandidate, tokens)
}

// Vote is a paid mutator transaction binding the contract method 0xefa5d431.
//
// Solidity: function vote(addrVoter address, addrCandidate address, tokens uint256) returns()
func (_BokerNode *BokerNodeTransactorSession) Vote(addrVoter common.Address, addrCandidate common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _BokerNode.Contract.Vote(&_BokerNode.TransactOpts, addrVoter, addrCandidate, tokens)
}
