// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package boker_contract

import (
	"math/big"
	"strings"

	"github.com/Tinachain/Tina/chain/accounts/abi"
	"github.com/Tinachain/Tina/chain/accounts/abi/bind"
	"github.com/Tinachain/Tina/chain/common"
	"github.com/Tinachain/Tina/chain/core/types"
)

// BokerLogABI is the input ABI used to generate the binding from.
const BokerLogABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"longtermTokens\",\"type\":\"uint256\"},{\"name\":\"shorttermTokens\",\"type\":\"uint256\"},{\"name\":\"longtermPowerTotal\",\"type\":\"uint256\"},{\"name\":\"shorttermPowerTotal\",\"type\":\"uint256\"}],\"name\":\"assignTokenLogAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cName\",\"type\":\"string\"}],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"commonLogAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"globalConfigString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"voteRotateLogGet\",\"outputs\":[{\"name\":\"rounds\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bokerManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrFrom\",\"type\":\"address\"},{\"name\":\"addrTo\",\"type\":\"address\"},{\"name\":\"tokensChange\",\"type\":\"uint256\"},{\"name\":\"tokensFrom\",\"type\":\"uint256\"},{\"name\":\"tokensTo\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"financeLogAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"assignTokenLogGet\",\"outputs\":[{\"name\":\"longtermTokenses\",\"type\":\"uint256[]\"},{\"name\":\"shorttermTokenses\",\"type\":\"uint256[]\"},{\"name\":\"longtermPowerTotals\",\"type\":\"uint256[]\"},{\"name\":\"shorttermPowerTotals\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"assignTokenLogGetIndex\",\"outputs\":[{\"name\":\"longtermTokens\",\"type\":\"uint256\"},{\"name\":\"shorttermTokens\",\"type\":\"uint256\"},{\"name\":\"longtermPowerTotal\",\"type\":\"uint256\"},{\"name\":\"shorttermPowerTotal\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"userTipLogGet\",\"outputs\":[{\"name\":\"addrUsers\",\"type\":\"address[]\"},{\"name\":\"tokensChanges\",\"type\":\"int256[]\"},{\"name\":\"tokensAfters\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"voteLogGet\",\"outputs\":[{\"name\":\"voteTypes\",\"type\":\"uint256[]\"},{\"name\":\"tokenses\",\"type\":\"uint256[]\"},{\"name\":\"addrCandidates\",\"type\":\"address[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"voteRotateLogGetIndex\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"voteRotateLogAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"userFinanceLogGet\",\"outputs\":[{\"name\":\"tokensChanges\",\"type\":\"int256[]\"},{\"name\":\"tokensAfters\",\"type\":\"uint256[]\"},{\"name\":\"reasons\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"},{\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrDapp\",\"type\":\"address\"},{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"powerType\",\"type\":\"uint256\"},{\"name\":\"powerChange\",\"type\":\"int256\"},{\"name\":\"powerNew\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"uint256\"},{\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"userPowerLogAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"userPowerLogGet\",\"outputs\":[{\"name\":\"addrDapps\",\"type\":\"address[]\"},{\"name\":\"powerTypes\",\"type\":\"uint256[]\"},{\"name\":\"powerChanges\",\"type\":\"int256[]\"},{\"name\":\"reasons\",\"type\":\"uint256[]\"},{\"name\":\"param1s\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"globalConfigInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"addrCandidate\",\"type\":\"address\"},{\"name\":\"voteType\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"voteLogAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addrManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// BokerLogBin is the compiled bytecode used for deploying new contracts.
const BokerLogBin = `60806040526040805190810160405280600581526020017f312e302e3100000000000000000000000000000000000000000000000000000081525060019080519060200190620000519291906200024b565b50426002553480156200006357600080fd5b5060405160208062004c318339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000e281620000ea640100000000026401000000009004565b5050620002fa565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663519c28826040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050506040513d60208110156200018057600080fd5b8101908080519060200190929190505050151562000206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f7420426f6b65724d616e616765722100000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028e57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002be578251825591602001919060010190620002a1565b5b509050620002ce9190620002d2565b5090565b620002f791905b80821115620002f3576000816000905550600101620002d9565b5090565b90565b614927806200030a6000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063102b3c14146101385780631eb726af1461018357806322df41141461022c578063378298bc1461027157806354fd4d50146103535780636069c8f4146103e357806361dcd7ab146104b757806366ebc1c6146104e2578063854bb3221461053957806389b72dcf146105c45780638da5cb5b146107705780639ea9db51146107c7578063a98215fb14610824578063b25532e0146109a8578063bef80e4414610b2c578063c7de6c9114610b74578063c7e552a814610ba1578063cffc35f614610d6d578063d0ebdbe714610e02578063d226fcab14610e45578063d43c802114611059578063e7f218f2146110d6578063f2fde38b1461114d575b600080fd5b34801561014457600080fd5b5061018160048036038101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611190565b005b34801561018f57600080fd5b506101ea600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611621565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023857600080fd5b5061026f600480360381019080803590602001908201803590602001919091929391929390803590602001909291905050506118cf565b005b34801561027d57600080fd5b506102d8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d69565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103185780820151818401526020810190506102fd565b50505050905090810190601f1680156103455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035f57600080fd5b50610368611ef9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a857808201518184015260208101905061038d565b50505050905090810190601f1680156103d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ef57600080fd5b506104186004803603810190808035906020019092919080359060200190929190505050611f97565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561045f578082015181840152602081019050610444565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104a1578082015181840152602081019050610486565b5050505090500194505050505060405180910390f35b3480156104c357600080fd5b506104cc612139565b6040518082815260200191505060405180910390f35b3480156104ee57600080fd5b506104f761213f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054557600080fd5b506105c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050612165565b005b3480156105d057600080fd5b506105f96004803603810190808035906020019092919080359060200190929190505050612660565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561064c578082015181840152602081019050610631565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561068e578082015181840152602081019050610673565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156106d05780820151818401526020810190506106b5565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156107125780820151818401526020810190506106f7565b50505050905001868103825287818151815260200191508051906020019060200280838360005b83811015610754578082015181840152602081019050610739565b505050509050019a505050505050505050505060405180910390f35b34801561077c57600080fd5b506107856128fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d357600080fd5b506107f260048036038101908080359060200190929190505050612922565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561083057600080fd5b50610879600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612a4c565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156108c85780820151818401526020810190506108ad565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561090a5780820151818401526020810190506108ef565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561094c578082015181840152602081019050610931565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561098e578082015181840152602081019050610973565b505050509050019850505050505050505060405180910390f35b3480156109b457600080fd5b506109fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612cc9565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015610a4c578082015181840152602081019050610a31565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610a8e578082015181840152602081019050610a73565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610ad0578082015181840152602081019050610ab5565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610b12578082015181840152602081019050610af7565b505050509050019850505050505050505060405180910390f35b348015610b3857600080fd5b50610b5760048036038101908080359060200190929190505050612f46565b604051808381526020018281526020019250505060405180910390f35b348015610b8057600080fd5b50610b9f60048036038101908080359060200190929190505050613042565b005b348015610bad57600080fd5b50610bf6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506134b8565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015610c49578082015181840152602081019050610c2e565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015610c8b578082015181840152602081019050610c70565b50505050905001868103845289818151815260200191508051906020019060200280838360005b83811015610ccd578082015181840152602081019050610cb2565b50505050905001868103835288818151815260200191508051906020019060200280838360005b83811015610d0f578082015181840152602081019050610cf4565b50505050905001868103825287818151815260200191508051906020019060200280838360005b83811015610d51578082015181840152602081019050610d36565b505050509050019a505050505050505050505060405180910390f35b348015610d7957600080fd5b50610e00600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061378a565b005b348015610e0e57600080fd5b50610e43600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613c8e565b005b348015610e5157600080fd5b50610e9a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613cf5565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b83811015610ef1578082015181840152602081019050610ed6565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b83811015610f33578082015181840152602081019050610f18565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610f75578082015181840152602081019050610f5a565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b83811015610fb7578082015181840152602081019050610f9c565b50505050905001878103835289818151815260200191508051906020019060200280838360005b83811015610ff9578082015181840152602081019050610fde565b50505050905001878103825288818151815260200191508051906020019060200280838360005b8381101561103b578082015181840152602081019050611020565b505050509050019c5050505050505050505050505060405180910390f35b34801561106557600080fd5b506110c0600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061401a565b6040518082815260200191505060405180910390f35b3480156110e257600080fd5b5061114b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050614154565b005b34801561115957600080fd5b5061118e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061463d565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156112a2578082015181840152602081019050611287565b50505050905090810190601f1680156112cf5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050506040513d602081101561131957600080fd5b8101908080519060200190929190505050806114cb5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611442578082015181840152602081019050611427565b50505050905090810190601f16801561146f5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561148f57600080fd5b505af11580156114a3573d6000803e3d6000fd5b505050506040513d60208110156114b957600080fd5b81019080805190602001909291905050505b151561153f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b61157d6040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663102b3c14858585856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001848152602001838152602001828152602001945050505050600060405180830381600087803b15801561160357600080fd5b505af1158015611617573d6000803e3d6000fd5b5050505050505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca1f3c1846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116ce5780820151818401526020810190506116b3565b50505050905090810190601f1680156116fb5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561171a57600080fd5b505af115801561172e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561175857600080fd5b8101908080519060200190929190805164010000000081111561177a57600080fd5b8281019050602081018481111561179057600080fd5b81518560018202830111640100000000821117156117ad57600080fd5b50509291906020018051906020019092919080516401000000008111156117d357600080fd5b828101905060208101848111156117e957600080fd5b815185600182028301116401000000008211171561180657600080fd5b505092919060200180519060200190929190505050505092505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f616464722069732030210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156119e15780820151818401526020810190506119c6565b50505050905090810190601f168015611a0e5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506040513d6020811015611a5857600080fd5b810190808051906020019092919050505080611c0a5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611b81578082015181840152602081019050611b66565b50505050905090810190601f168015611bae5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611bce57600080fd5b505af1158015611be2573d6000803e3d6000fd5b505050506040513d6020811015611bf857600080fd5b81019080805190602001909291905050505b1515611c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b611cbc6040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff166322df41148484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200183815260200182810382528585828181526020019250808284378201915050945050505050600060405180830381600087803b158015611d4c57600080fd5b505af1158015611d60573d6000803e3d6000fd5b50505050505050565b6060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a189f35836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e15578082015181840152602081019050611dfa565b50505050905090810190601f168015611e425780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611e9f57600080fd5b810190808051640100000000811115611eb757600080fd5b82810190506020810184811115611ecd57600080fd5b8151856001820283011164010000000082111715611eea57600080fd5b50509291905050509050919050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f8f5780601f10611f6457610100808354040283529160200191611f8f565b820191906000526020600020905b815481529060010190602001808311611f7257829003601f168201915b505050505081565b606080611fd86040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff16636069c8f485856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561204e57600080fd5b505af1158015612062573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561208c57600080fd5b8101908080516401000000008111156120a457600080fd5b828101905060208101848111156120ba57600080fd5b81518560208202830111640100000000821117156120d757600080fd5b505092919060200180516401000000008111156120f357600080fd5b8281019050602081018481111561210957600080fd5b815185602082028301116401000000008211171561212657600080fd5b5050929190505050915091509250929050565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561227757808201518184015260208101905061225c565b50505050905090810190601f1680156122a45780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156122c457600080fd5b505af11580156122d8573d6000803e3d6000fd5b505050506040513d60208110156122ee57600080fd5b8101908080519060200190929190505050806124a05750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156124175780820151818401526020810190506123fc565b50505050905090810190601f1680156124445780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561246457600080fd5b505af1158015612478573d6000803e3d6000fd5b505050506040513d602081101561248e57600080fd5b81019080805190602001909291905050505b1515612514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b6125526040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663854bb3228787878787876040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019650505050505050600060405180830381600087803b15801561264057600080fd5b505af1158015612654573d6000803e3d6000fd5b50505050505050505050565b60608060608060606126a66040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff166389b72dcf88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561271c57600080fd5b505af1158015612730573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561275a57600080fd5b81019080805164010000000081111561277257600080fd5b8281019050602081018481111561278857600080fd5b81518560208202830111640100000000821117156127a557600080fd5b505092919060200180516401000000008111156127c157600080fd5b828101905060208101848111156127d757600080fd5b81518560208202830111640100000000821117156127f457600080fd5b5050929190602001805164010000000081111561281057600080fd5b8281019050602081018481111561282657600080fd5b815185602082028301116401000000008211171561284357600080fd5b5050929190602001805164010000000081111561285f57600080fd5b8281019050602081018481111561287557600080fd5b815185602082028301116401000000008211171561289257600080fd5b505092919060200180516401000000008111156128ae57600080fd5b828101905060208101848111156128c457600080fd5b81518560208202830111640100000000821117156128e157600080fd5b5050929190505050945094509450945094509295509295909350565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060006129686040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff16639ea9db51876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060a060405180830381600087803b1580156129d657600080fd5b505af11580156129ea573d6000803e3d6000fd5b505050506040513d60a0811015612a0057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509450945094509450945091939590929450565b606080606080612a906040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663a98215fb8888886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015612b3a57600080fd5b505af1158015612b4e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506080811015612b7857600080fd5b810190808051640100000000811115612b9057600080fd5b82810190506020810184811115612ba657600080fd5b8151856020820283011164010000000082111715612bc357600080fd5b50509291906020018051640100000000811115612bdf57600080fd5b82810190506020810184811115612bf557600080fd5b8151856020820283011164010000000082111715612c1257600080fd5b50509291906020018051640100000000811115612c2e57600080fd5b82810190506020810184811115612c4457600080fd5b8151856020820283011164010000000082111715612c6157600080fd5b50509291906020018051640100000000811115612c7d57600080fd5b82810190506020810184811115612c9357600080fd5b8151856020820283011164010000000082111715612cb057600080fd5b5050929190505050935093509350935093509350935093565b606080606080612d0d6040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663b25532e08888886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015612db757600080fd5b505af1158015612dcb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506080811015612df557600080fd5b810190808051640100000000811115612e0d57600080fd5b82810190506020810184811115612e2357600080fd5b8151856020820283011164010000000082111715612e4057600080fd5b50509291906020018051640100000000811115612e5c57600080fd5b82810190506020810184811115612e7257600080fd5b8151856020820283011164010000000082111715612e8f57600080fd5b50509291906020018051640100000000811115612eab57600080fd5b82810190506020810184811115612ec157600080fd5b8151856020820283011164010000000082111715612ede57600080fd5b50509291906020018051640100000000811115612efa57600080fd5b82810190506020810184811115612f1057600080fd5b8151856020820283011164010000000082111715612f2d57600080fd5b5050929190505050935093509350935093509350935093565b600080612f876040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663bef80e44846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506040805180830381600087803b158015612ff457600080fd5b505af1158015613008573d6000803e3d6000fd5b505050506040513d604081101561301e57600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613154578082015181840152602081019050613139565b50505050905090810190601f1680156131815780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156131a157600080fd5b505af11580156131b5573d6000803e3d6000fd5b505050506040513d60208110156131cb57600080fd5b81019080805190602001909291905050508061337d5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156132f45780820151818401526020810190506132d9565b50505050905090810190601f1680156133215780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561334157600080fd5b505af1158015613355573d6000803e3d6000fd5b505050506040513d602081101561336b57600080fd5b81019080805190602001909291905050505b15156133f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b61342f6040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663c7de6c91826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561349d57600080fd5b505af11580156134b1573d6000803e3d6000fd5b5050505050565b60608060608060606134fe6040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663c7e552a88989896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b1580156135a857600080fd5b505af11580156135bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a08110156135e657600080fd5b8101908080516401000000008111156135fe57600080fd5b8281019050602081018481111561361457600080fd5b815185602082028301116401000000008211171561363157600080fd5b5050929190602001805164010000000081111561364d57600080fd5b8281019050602081018481111561366357600080fd5b815185602082028301116401000000008211171561368057600080fd5b5050929190602001805164010000000081111561369c57600080fd5b828101905060208101848111156136b257600080fd5b81518560208202830111640100000000821117156136cf57600080fd5b505092919060200180516401000000008111156136eb57600080fd5b8281019050602081018481111561370157600080fd5b815185602082028301116401000000008211171561371e57600080fd5b5050929190602001805164010000000081111561373a57600080fd5b8281019050602081018481111561375057600080fd5b815185602082028301116401000000008211171561376d57600080fd5b505092919050505094509450945094509450939792965093509350565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561389c578082015181840152602081019050613881565b50505050905090810190601f1680156138c95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156138e957600080fd5b505af11580156138fd573d6000803e3d6000fd5b505050506040513d602081101561391357600080fd5b810190808051906020019092919050505080613ac55750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613a3c578082015181840152602081019050613a21565b50505050905090810190601f168015613a695780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613a8957600080fd5b505af1158015613a9d573d6000803e3d6000fd5b505050506040513d6020811015613ab357600080fd5b81019080805190602001909291905050505b1515613b39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b613b776040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663cffc35f6888888888888886040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001838152602001828152602001975050505050505050600060405180830381600087803b158015613c6d57600080fd5b505af1158015613c81573d6000803e3d6000fd5b5050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613ce957600080fd5b613cf2816146a4565b50565b606080606080606080613d3c6040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663d226fcab8a8a8a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015613de657600080fd5b505af1158015613dfa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060c0811015613e2457600080fd5b810190808051640100000000811115613e3c57600080fd5b82810190506020810184811115613e5257600080fd5b8151856020820283011164010000000082111715613e6f57600080fd5b50509291906020018051640100000000811115613e8b57600080fd5b82810190506020810184811115613ea157600080fd5b8151856020820283011164010000000082111715613ebe57600080fd5b50509291906020018051640100000000811115613eda57600080fd5b82810190506020810184811115613ef057600080fd5b8151856020820283011164010000000082111715613f0d57600080fd5b50509291906020018051640100000000811115613f2957600080fd5b82810190506020810184811115613f3f57600080fd5b8151856020820283011164010000000082111715613f5c57600080fd5b50509291906020018051640100000000811115613f7857600080fd5b82810190506020810184811115613f8e57600080fd5b8151856020820283011164010000000082111715613fab57600080fd5b50509291906020018051640100000000811115613fc757600080fd5b82810190506020810184811115613fdd57600080fd5b8151856020820283011164010000000082111715613ffa57600080fd5b505092919050505095509550955095509550955093975093979195509350565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633230b078836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156140c65780820151818401526020810190506140ab565b50505050905090810190601f1680156140f35780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561411257600080fd5b505af1158015614126573d6000803e3d6000fd5b505050506040513d602081101561413c57600080fd5b81019080805190602001909291905050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561426657808201518184015260208101905061424b565b50505050905090810190601f1680156142935780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156142b357600080fd5b505af11580156142c7573d6000803e3d6000fd5b505050506040513d60208110156142dd57600080fd5b81019080805190602001909291905050508061448f5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156144065780820151818401526020810190506143eb565b50505050905090810190601f1680156144335780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561445357600080fd5b505af1158015614467573d6000803e3d6000fd5b505050506040513d602081101561447d57600080fd5b81019080805190602001909291905050505b1515614503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b6145416040805190810160405280600c81526020017f426f6b65724c6f67446174610000000000000000000000000000000000000000815250611621565b73ffffffffffffffffffffffffffffffffffffffff1663e7f218f2858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b15801561461f57600080fd5b505af1158015614633573d6000803e3d6000fd5b5050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561469857600080fd5b6146a181614801565b50565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663519c28826040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561470d57600080fd5b505af1158015614721573d6000803e3d6000fd5b505050506040513d602081101561473757600080fd5b810190808051906020019092919050505015156147bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f7420426f6b65724d616e616765722100000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561483d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820cd8ed81370e5000dc036dc8cbd47f993be4cca385ffc67791a418fff927b2c9e0029`

// DeployBokerLog deploys a new Ethereum contract, binding an instance of BokerLog to it.
func DeployBokerLog(auth *bind.TransactOpts, backend bind.ContractBackend, addrManager common.Address) (common.Address, *types.Transaction, *BokerLog, error) {
	parsed, err := abi.JSON(strings.NewReader(BokerLogABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BokerLogBin), backend, addrManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BokerLog{BokerLogCaller: BokerLogCaller{contract: contract}, BokerLogTransactor: BokerLogTransactor{contract: contract}}, nil
}

// BokerLog is an auto generated Go binding around an Ethereum contract.
type BokerLog struct {
	BokerLogCaller     // Read-only binding to the contract
	BokerLogTransactor // Write-only binding to the contract
}

// BokerLogCaller is an auto generated read-only Go binding around an Ethereum contract.
type BokerLogCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BokerLogTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BokerLogTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BokerLogSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BokerLogSession struct {
	Contract     *BokerLog         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BokerLogCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BokerLogCallerSession struct {
	Contract *BokerLogCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BokerLogTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BokerLogTransactorSession struct {
	Contract     *BokerLogTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BokerLogRaw is an auto generated low-level Go binding around an Ethereum contract.
type BokerLogRaw struct {
	Contract *BokerLog // Generic contract binding to access the raw methods on
}

// BokerLogCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BokerLogCallerRaw struct {
	Contract *BokerLogCaller // Generic read-only contract binding to access the raw methods on
}

// BokerLogTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BokerLogTransactorRaw struct {
	Contract *BokerLogTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBokerLog creates a new instance of BokerLog, bound to a specific deployed contract.
func NewBokerLog(address common.Address, backend bind.ContractBackend) (*BokerLog, error) {
	contract, err := bindBokerLog(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BokerLog{BokerLogCaller: BokerLogCaller{contract: contract}, BokerLogTransactor: BokerLogTransactor{contract: contract}}, nil
}

// NewBokerLogCaller creates a new read-only instance of BokerLog, bound to a specific deployed contract.
func NewBokerLogCaller(address common.Address, caller bind.ContractCaller) (*BokerLogCaller, error) {
	contract, err := bindBokerLog(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &BokerLogCaller{contract: contract}, nil
}

// NewBokerLogTransactor creates a new write-only instance of BokerLog, bound to a specific deployed contract.
func NewBokerLogTransactor(address common.Address, transactor bind.ContractTransactor) (*BokerLogTransactor, error) {
	contract, err := bindBokerLog(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &BokerLogTransactor{contract: contract}, nil
}

// bindBokerLog binds a generic wrapper to an already deployed contract.
func bindBokerLog(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BokerLogABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BokerLog *BokerLogRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BokerLog.Contract.BokerLogCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BokerLog *BokerLogRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerLog.Contract.BokerLogTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BokerLog *BokerLogRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BokerLog.Contract.BokerLogTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BokerLog *BokerLogCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BokerLog.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BokerLog *BokerLogTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerLog.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BokerLog *BokerLogTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BokerLog.Contract.contract.Transact(opts, method, params...)
}

// AssignTokenLogGet is a free data retrieval call binding the contract method 0x89b72dcf.
//
// Solidity: function assignTokenLogGet(page uint256, pageSize uint256) constant returns(longtermTokenses uint256[], shorttermTokenses uint256[], longtermPowerTotals uint256[], shorttermPowerTotals uint256[], times uint256[])
func (_BokerLog *BokerLogCaller) AssignTokenLogGet(opts *bind.CallOpts, page *big.Int, pageSize *big.Int) (struct {
	LongtermTokenses     []*big.Int
	ShorttermTokenses    []*big.Int
	LongtermPowerTotals  []*big.Int
	ShorttermPowerTotals []*big.Int
	Times                []*big.Int
}, error) {
	ret := new(struct {
		LongtermTokenses     []*big.Int
		ShorttermTokenses    []*big.Int
		LongtermPowerTotals  []*big.Int
		ShorttermPowerTotals []*big.Int
		Times                []*big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "assignTokenLogGet", page, pageSize)
	return *ret, err
}

// AssignTokenLogGet is a free data retrieval call binding the contract method 0x89b72dcf.
//
// Solidity: function assignTokenLogGet(page uint256, pageSize uint256) constant returns(longtermTokenses uint256[], shorttermTokenses uint256[], longtermPowerTotals uint256[], shorttermPowerTotals uint256[], times uint256[])
func (_BokerLog *BokerLogSession) AssignTokenLogGet(page *big.Int, pageSize *big.Int) (struct {
	LongtermTokenses     []*big.Int
	ShorttermTokenses    []*big.Int
	LongtermPowerTotals  []*big.Int
	ShorttermPowerTotals []*big.Int
	Times                []*big.Int
}, error) {
	return _BokerLog.Contract.AssignTokenLogGet(&_BokerLog.CallOpts, page, pageSize)
}

// AssignTokenLogGet is a free data retrieval call binding the contract method 0x89b72dcf.
//
// Solidity: function assignTokenLogGet(page uint256, pageSize uint256) constant returns(longtermTokenses uint256[], shorttermTokenses uint256[], longtermPowerTotals uint256[], shorttermPowerTotals uint256[], times uint256[])
func (_BokerLog *BokerLogCallerSession) AssignTokenLogGet(page *big.Int, pageSize *big.Int) (struct {
	LongtermTokenses     []*big.Int
	ShorttermTokenses    []*big.Int
	LongtermPowerTotals  []*big.Int
	ShorttermPowerTotals []*big.Int
	Times                []*big.Int
}, error) {
	return _BokerLog.Contract.AssignTokenLogGet(&_BokerLog.CallOpts, page, pageSize)
}

// AssignTokenLogGetIndex is a free data retrieval call binding the contract method 0x9ea9db51.
//
// Solidity: function assignTokenLogGetIndex(index uint256) constant returns(longtermTokens uint256, shorttermTokens uint256, longtermPowerTotal uint256, shorttermPowerTotal uint256, time uint256)
func (_BokerLog *BokerLogCaller) AssignTokenLogGetIndex(opts *bind.CallOpts, index *big.Int) (struct {
	LongtermTokens      *big.Int
	ShorttermTokens     *big.Int
	LongtermPowerTotal  *big.Int
	ShorttermPowerTotal *big.Int
	Time                *big.Int
}, error) {
	ret := new(struct {
		LongtermTokens      *big.Int
		ShorttermTokens     *big.Int
		LongtermPowerTotal  *big.Int
		ShorttermPowerTotal *big.Int
		Time                *big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "assignTokenLogGetIndex", index)
	return *ret, err
}

// AssignTokenLogGetIndex is a free data retrieval call binding the contract method 0x9ea9db51.
//
// Solidity: function assignTokenLogGetIndex(index uint256) constant returns(longtermTokens uint256, shorttermTokens uint256, longtermPowerTotal uint256, shorttermPowerTotal uint256, time uint256)
func (_BokerLog *BokerLogSession) AssignTokenLogGetIndex(index *big.Int) (struct {
	LongtermTokens      *big.Int
	ShorttermTokens     *big.Int
	LongtermPowerTotal  *big.Int
	ShorttermPowerTotal *big.Int
	Time                *big.Int
}, error) {
	return _BokerLog.Contract.AssignTokenLogGetIndex(&_BokerLog.CallOpts, index)
}

// AssignTokenLogGetIndex is a free data retrieval call binding the contract method 0x9ea9db51.
//
// Solidity: function assignTokenLogGetIndex(index uint256) constant returns(longtermTokens uint256, shorttermTokens uint256, longtermPowerTotal uint256, shorttermPowerTotal uint256, time uint256)
func (_BokerLog *BokerLogCallerSession) AssignTokenLogGetIndex(index *big.Int) (struct {
	LongtermTokens      *big.Int
	ShorttermTokens     *big.Int
	LongtermPowerTotal  *big.Int
	ShorttermPowerTotal *big.Int
	Time                *big.Int
}, error) {
	return _BokerLog.Contract.AssignTokenLogGetIndex(&_BokerLog.CallOpts, index)
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerLog *BokerLogCaller) BokerManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "bokerManager")
	return *ret0, err
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerLog *BokerLogSession) BokerManager() (common.Address, error) {
	return _BokerLog.Contract.BokerManager(&_BokerLog.CallOpts)
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerLog *BokerLogCallerSession) BokerManager() (common.Address, error) {
	return _BokerLog.Contract.BokerManager(&_BokerLog.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerLog *BokerLogCaller) ContractAddress(opts *bind.CallOpts, cName string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "contractAddress", cName)
	return *ret0, err
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerLog *BokerLogSession) ContractAddress(cName string) (common.Address, error) {
	return _BokerLog.Contract.ContractAddress(&_BokerLog.CallOpts, cName)
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerLog *BokerLogCallerSession) ContractAddress(cName string) (common.Address, error) {
	return _BokerLog.Contract.ContractAddress(&_BokerLog.CallOpts, cName)
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerLog *BokerLogCaller) CreateTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "createTime")
	return *ret0, err
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerLog *BokerLogSession) CreateTime() (*big.Int, error) {
	return _BokerLog.Contract.CreateTime(&_BokerLog.CallOpts)
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerLog *BokerLogCallerSession) CreateTime() (*big.Int, error) {
	return _BokerLog.Contract.CreateTime(&_BokerLog.CallOpts)
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerLog *BokerLogCaller) GlobalConfigInt(opts *bind.CallOpts, key string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "globalConfigInt", key)
	return *ret0, err
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerLog *BokerLogSession) GlobalConfigInt(key string) (*big.Int, error) {
	return _BokerLog.Contract.GlobalConfigInt(&_BokerLog.CallOpts, key)
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerLog *BokerLogCallerSession) GlobalConfigInt(key string) (*big.Int, error) {
	return _BokerLog.Contract.GlobalConfigInt(&_BokerLog.CallOpts, key)
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerLog *BokerLogCaller) GlobalConfigString(opts *bind.CallOpts, key string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "globalConfigString", key)
	return *ret0, err
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerLog *BokerLogSession) GlobalConfigString(key string) (string, error) {
	return _BokerLog.Contract.GlobalConfigString(&_BokerLog.CallOpts, key)
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerLog *BokerLogCallerSession) GlobalConfigString(key string) (string, error) {
	return _BokerLog.Contract.GlobalConfigString(&_BokerLog.CallOpts, key)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerLog *BokerLogCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerLog *BokerLogSession) Owner() (common.Address, error) {
	return _BokerLog.Contract.Owner(&_BokerLog.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerLog *BokerLogCallerSession) Owner() (common.Address, error) {
	return _BokerLog.Contract.Owner(&_BokerLog.CallOpts)
}

// UserFinanceLogGet is a free data retrieval call binding the contract method 0xc7e552a8.
//
// Solidity: function userFinanceLogGet(addrUser address, page uint256, pageSize uint256) constant returns(tokensChanges int256[], tokensAfters uint256[], reasons uint256[], times uint256[], indexes uint256[])
func (_BokerLog *BokerLogCaller) UserFinanceLogGet(opts *bind.CallOpts, addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	TokensChanges []*big.Int
	TokensAfters  []*big.Int
	Reasons       []*big.Int
	Times         []*big.Int
	Indexes       []*big.Int
}, error) {
	ret := new(struct {
		TokensChanges []*big.Int
		TokensAfters  []*big.Int
		Reasons       []*big.Int
		Times         []*big.Int
		Indexes       []*big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "userFinanceLogGet", addrUser, page, pageSize)
	return *ret, err
}

// UserFinanceLogGet is a free data retrieval call binding the contract method 0xc7e552a8.
//
// Solidity: function userFinanceLogGet(addrUser address, page uint256, pageSize uint256) constant returns(tokensChanges int256[], tokensAfters uint256[], reasons uint256[], times uint256[], indexes uint256[])
func (_BokerLog *BokerLogSession) UserFinanceLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	TokensChanges []*big.Int
	TokensAfters  []*big.Int
	Reasons       []*big.Int
	Times         []*big.Int
	Indexes       []*big.Int
}, error) {
	return _BokerLog.Contract.UserFinanceLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// UserFinanceLogGet is a free data retrieval call binding the contract method 0xc7e552a8.
//
// Solidity: function userFinanceLogGet(addrUser address, page uint256, pageSize uint256) constant returns(tokensChanges int256[], tokensAfters uint256[], reasons uint256[], times uint256[], indexes uint256[])
func (_BokerLog *BokerLogCallerSession) UserFinanceLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	TokensChanges []*big.Int
	TokensAfters  []*big.Int
	Reasons       []*big.Int
	Times         []*big.Int
	Indexes       []*big.Int
}, error) {
	return _BokerLog.Contract.UserFinanceLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// UserPowerLogGet is a free data retrieval call binding the contract method 0xd226fcab.
//
// Solidity: function userPowerLogGet(addrUser address, page uint256, pageSize uint256) constant returns(addrDapps address[], powerTypes uint256[], powerChanges int256[], reasons uint256[], param1s uint256[], times uint256[])
func (_BokerLog *BokerLogCaller) UserPowerLogGet(opts *bind.CallOpts, addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	AddrDapps    []common.Address
	PowerTypes   []*big.Int
	PowerChanges []*big.Int
	Reasons      []*big.Int
	Param1s      []*big.Int
	Times        []*big.Int
}, error) {
	ret := new(struct {
		AddrDapps    []common.Address
		PowerTypes   []*big.Int
		PowerChanges []*big.Int
		Reasons      []*big.Int
		Param1s      []*big.Int
		Times        []*big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "userPowerLogGet", addrUser, page, pageSize)
	return *ret, err
}

// UserPowerLogGet is a free data retrieval call binding the contract method 0xd226fcab.
//
// Solidity: function userPowerLogGet(addrUser address, page uint256, pageSize uint256) constant returns(addrDapps address[], powerTypes uint256[], powerChanges int256[], reasons uint256[], param1s uint256[], times uint256[])
func (_BokerLog *BokerLogSession) UserPowerLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	AddrDapps    []common.Address
	PowerTypes   []*big.Int
	PowerChanges []*big.Int
	Reasons      []*big.Int
	Param1s      []*big.Int
	Times        []*big.Int
}, error) {
	return _BokerLog.Contract.UserPowerLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// UserPowerLogGet is a free data retrieval call binding the contract method 0xd226fcab.
//
// Solidity: function userPowerLogGet(addrUser address, page uint256, pageSize uint256) constant returns(addrDapps address[], powerTypes uint256[], powerChanges int256[], reasons uint256[], param1s uint256[], times uint256[])
func (_BokerLog *BokerLogCallerSession) UserPowerLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	AddrDapps    []common.Address
	PowerTypes   []*big.Int
	PowerChanges []*big.Int
	Reasons      []*big.Int
	Param1s      []*big.Int
	Times        []*big.Int
}, error) {
	return _BokerLog.Contract.UserPowerLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// UserTipLogGet is a free data retrieval call binding the contract method 0xa98215fb.
//
// Solidity: function userTipLogGet(addrUser address, page uint256, pageSize uint256) constant returns(addrUsers address[], tokensChanges int256[], tokensAfters uint256[], times uint256[])
func (_BokerLog *BokerLogCaller) UserTipLogGet(opts *bind.CallOpts, addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	AddrUsers     []common.Address
	TokensChanges []*big.Int
	TokensAfters  []*big.Int
	Times         []*big.Int
}, error) {
	ret := new(struct {
		AddrUsers     []common.Address
		TokensChanges []*big.Int
		TokensAfters  []*big.Int
		Times         []*big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "userTipLogGet", addrUser, page, pageSize)
	return *ret, err
}

// UserTipLogGet is a free data retrieval call binding the contract method 0xa98215fb.
//
// Solidity: function userTipLogGet(addrUser address, page uint256, pageSize uint256) constant returns(addrUsers address[], tokensChanges int256[], tokensAfters uint256[], times uint256[])
func (_BokerLog *BokerLogSession) UserTipLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	AddrUsers     []common.Address
	TokensChanges []*big.Int
	TokensAfters  []*big.Int
	Times         []*big.Int
}, error) {
	return _BokerLog.Contract.UserTipLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// UserTipLogGet is a free data retrieval call binding the contract method 0xa98215fb.
//
// Solidity: function userTipLogGet(addrUser address, page uint256, pageSize uint256) constant returns(addrUsers address[], tokensChanges int256[], tokensAfters uint256[], times uint256[])
func (_BokerLog *BokerLogCallerSession) UserTipLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	AddrUsers     []common.Address
	TokensChanges []*big.Int
	TokensAfters  []*big.Int
	Times         []*big.Int
}, error) {
	return _BokerLog.Contract.UserTipLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerLog *BokerLogCaller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BokerLog.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerLog *BokerLogSession) Version() (string, error) {
	return _BokerLog.Contract.Version(&_BokerLog.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerLog *BokerLogCallerSession) Version() (string, error) {
	return _BokerLog.Contract.Version(&_BokerLog.CallOpts)
}

// VoteLogGet is a free data retrieval call binding the contract method 0xb25532e0.
//
// Solidity: function voteLogGet(addrUser address, page uint256, pageSize uint256) constant returns(voteTypes uint256[], tokenses uint256[], addrCandidates address[], times uint256[])
func (_BokerLog *BokerLogCaller) VoteLogGet(opts *bind.CallOpts, addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	VoteTypes      []*big.Int
	Tokenses       []*big.Int
	AddrCandidates []common.Address
	Times          []*big.Int
}, error) {
	ret := new(struct {
		VoteTypes      []*big.Int
		Tokenses       []*big.Int
		AddrCandidates []common.Address
		Times          []*big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "voteLogGet", addrUser, page, pageSize)
	return *ret, err
}

// VoteLogGet is a free data retrieval call binding the contract method 0xb25532e0.
//
// Solidity: function voteLogGet(addrUser address, page uint256, pageSize uint256) constant returns(voteTypes uint256[], tokenses uint256[], addrCandidates address[], times uint256[])
func (_BokerLog *BokerLogSession) VoteLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	VoteTypes      []*big.Int
	Tokenses       []*big.Int
	AddrCandidates []common.Address
	Times          []*big.Int
}, error) {
	return _BokerLog.Contract.VoteLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// VoteLogGet is a free data retrieval call binding the contract method 0xb25532e0.
//
// Solidity: function voteLogGet(addrUser address, page uint256, pageSize uint256) constant returns(voteTypes uint256[], tokenses uint256[], addrCandidates address[], times uint256[])
func (_BokerLog *BokerLogCallerSession) VoteLogGet(addrUser common.Address, page *big.Int, pageSize *big.Int) (struct {
	VoteTypes      []*big.Int
	Tokenses       []*big.Int
	AddrCandidates []common.Address
	Times          []*big.Int
}, error) {
	return _BokerLog.Contract.VoteLogGet(&_BokerLog.CallOpts, addrUser, page, pageSize)
}

// VoteRotateLogGet is a free data retrieval call binding the contract method 0x6069c8f4.
//
// Solidity: function voteRotateLogGet(page uint256, pageSize uint256) constant returns(rounds uint256[], times uint256[])
func (_BokerLog *BokerLogCaller) VoteRotateLogGet(opts *bind.CallOpts, page *big.Int, pageSize *big.Int) (struct {
	Rounds []*big.Int
	Times  []*big.Int
}, error) {
	ret := new(struct {
		Rounds []*big.Int
		Times  []*big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "voteRotateLogGet", page, pageSize)
	return *ret, err
}

// VoteRotateLogGet is a free data retrieval call binding the contract method 0x6069c8f4.
//
// Solidity: function voteRotateLogGet(page uint256, pageSize uint256) constant returns(rounds uint256[], times uint256[])
func (_BokerLog *BokerLogSession) VoteRotateLogGet(page *big.Int, pageSize *big.Int) (struct {
	Rounds []*big.Int
	Times  []*big.Int
}, error) {
	return _BokerLog.Contract.VoteRotateLogGet(&_BokerLog.CallOpts, page, pageSize)
}

// VoteRotateLogGet is a free data retrieval call binding the contract method 0x6069c8f4.
//
// Solidity: function voteRotateLogGet(page uint256, pageSize uint256) constant returns(rounds uint256[], times uint256[])
func (_BokerLog *BokerLogCallerSession) VoteRotateLogGet(page *big.Int, pageSize *big.Int) (struct {
	Rounds []*big.Int
	Times  []*big.Int
}, error) {
	return _BokerLog.Contract.VoteRotateLogGet(&_BokerLog.CallOpts, page, pageSize)
}

// VoteRotateLogGetIndex is a free data retrieval call binding the contract method 0xbef80e44.
//
// Solidity: function voteRotateLogGetIndex(index uint256) constant returns(round uint256, time uint256)
func (_BokerLog *BokerLogCaller) VoteRotateLogGetIndex(opts *bind.CallOpts, index *big.Int) (struct {
	Round *big.Int
	Time  *big.Int
}, error) {
	ret := new(struct {
		Round *big.Int
		Time  *big.Int
	})
	out := ret
	err := _BokerLog.contract.Call(opts, out, "voteRotateLogGetIndex", index)
	return *ret, err
}

// VoteRotateLogGetIndex is a free data retrieval call binding the contract method 0xbef80e44.
//
// Solidity: function voteRotateLogGetIndex(index uint256) constant returns(round uint256, time uint256)
func (_BokerLog *BokerLogSession) VoteRotateLogGetIndex(index *big.Int) (struct {
	Round *big.Int
	Time  *big.Int
}, error) {
	return _BokerLog.Contract.VoteRotateLogGetIndex(&_BokerLog.CallOpts, index)
}

// VoteRotateLogGetIndex is a free data retrieval call binding the contract method 0xbef80e44.
//
// Solidity: function voteRotateLogGetIndex(index uint256) constant returns(round uint256, time uint256)
func (_BokerLog *BokerLogCallerSession) VoteRotateLogGetIndex(index *big.Int) (struct {
	Round *big.Int
	Time  *big.Int
}, error) {
	return _BokerLog.Contract.VoteRotateLogGetIndex(&_BokerLog.CallOpts, index)
}

// AssignTokenLogAdd is a paid mutator transaction binding the contract method 0x102b3c14.
//
// Solidity: function assignTokenLogAdd(longtermTokens uint256, shorttermTokens uint256, longtermPowerTotal uint256, shorttermPowerTotal uint256) returns()
func (_BokerLog *BokerLogTransactor) AssignTokenLogAdd(opts *bind.TransactOpts, longtermTokens *big.Int, shorttermTokens *big.Int, longtermPowerTotal *big.Int, shorttermPowerTotal *big.Int) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "assignTokenLogAdd", longtermTokens, shorttermTokens, longtermPowerTotal, shorttermPowerTotal)
}

// AssignTokenLogAdd is a paid mutator transaction binding the contract method 0x102b3c14.
//
// Solidity: function assignTokenLogAdd(longtermTokens uint256, shorttermTokens uint256, longtermPowerTotal uint256, shorttermPowerTotal uint256) returns()
func (_BokerLog *BokerLogSession) AssignTokenLogAdd(longtermTokens *big.Int, shorttermTokens *big.Int, longtermPowerTotal *big.Int, shorttermPowerTotal *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.AssignTokenLogAdd(&_BokerLog.TransactOpts, longtermTokens, shorttermTokens, longtermPowerTotal, shorttermPowerTotal)
}

// AssignTokenLogAdd is a paid mutator transaction binding the contract method 0x102b3c14.
//
// Solidity: function assignTokenLogAdd(longtermTokens uint256, shorttermTokens uint256, longtermPowerTotal uint256, shorttermPowerTotal uint256) returns()
func (_BokerLog *BokerLogTransactorSession) AssignTokenLogAdd(longtermTokens *big.Int, shorttermTokens *big.Int, longtermPowerTotal *big.Int, shorttermPowerTotal *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.AssignTokenLogAdd(&_BokerLog.TransactOpts, longtermTokens, shorttermTokens, longtermPowerTotal, shorttermPowerTotal)
}

// CommonLogAdd is a paid mutator transaction binding the contract method 0x22df4114.
//
// Solidity: function commonLogAdd(data string, time uint256) returns()
func (_BokerLog *BokerLogTransactor) CommonLogAdd(opts *bind.TransactOpts, data string, time *big.Int) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "commonLogAdd", data, time)
}

// CommonLogAdd is a paid mutator transaction binding the contract method 0x22df4114.
//
// Solidity: function commonLogAdd(data string, time uint256) returns()
func (_BokerLog *BokerLogSession) CommonLogAdd(data string, time *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.CommonLogAdd(&_BokerLog.TransactOpts, data, time)
}

// CommonLogAdd is a paid mutator transaction binding the contract method 0x22df4114.
//
// Solidity: function commonLogAdd(data string, time uint256) returns()
func (_BokerLog *BokerLogTransactorSession) CommonLogAdd(data string, time *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.CommonLogAdd(&_BokerLog.TransactOpts, data, time)
}

// FinanceLogAdd is a paid mutator transaction binding the contract method 0x854bb322.
//
// Solidity: function financeLogAdd(addrFrom address, addrTo address, tokensChange uint256, tokensFrom uint256, tokensTo uint256, reason uint256) returns()
func (_BokerLog *BokerLogTransactor) FinanceLogAdd(opts *bind.TransactOpts, addrFrom common.Address, addrTo common.Address, tokensChange *big.Int, tokensFrom *big.Int, tokensTo *big.Int, reason *big.Int) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "financeLogAdd", addrFrom, addrTo, tokensChange, tokensFrom, tokensTo, reason)
}

// FinanceLogAdd is a paid mutator transaction binding the contract method 0x854bb322.
//
// Solidity: function financeLogAdd(addrFrom address, addrTo address, tokensChange uint256, tokensFrom uint256, tokensTo uint256, reason uint256) returns()
func (_BokerLog *BokerLogSession) FinanceLogAdd(addrFrom common.Address, addrTo common.Address, tokensChange *big.Int, tokensFrom *big.Int, tokensTo *big.Int, reason *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.FinanceLogAdd(&_BokerLog.TransactOpts, addrFrom, addrTo, tokensChange, tokensFrom, tokensTo, reason)
}

// FinanceLogAdd is a paid mutator transaction binding the contract method 0x854bb322.
//
// Solidity: function financeLogAdd(addrFrom address, addrTo address, tokensChange uint256, tokensFrom uint256, tokensTo uint256, reason uint256) returns()
func (_BokerLog *BokerLogTransactorSession) FinanceLogAdd(addrFrom common.Address, addrTo common.Address, tokensChange *big.Int, tokensFrom *big.Int, tokensTo *big.Int, reason *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.FinanceLogAdd(&_BokerLog.TransactOpts, addrFrom, addrTo, tokensChange, tokensFrom, tokensTo, reason)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerLog *BokerLogTransactor) SetManager(opts *bind.TransactOpts, addrManager common.Address) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "setManager", addrManager)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerLog *BokerLogSession) SetManager(addrManager common.Address) (*types.Transaction, error) {
	return _BokerLog.Contract.SetManager(&_BokerLog.TransactOpts, addrManager)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerLog *BokerLogTransactorSession) SetManager(addrManager common.Address) (*types.Transaction, error) {
	return _BokerLog.Contract.SetManager(&_BokerLog.TransactOpts, addrManager)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerLog *BokerLogTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerLog *BokerLogSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _BokerLog.Contract.TransferOwnership(&_BokerLog.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerLog *BokerLogTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _BokerLog.Contract.TransferOwnership(&_BokerLog.TransactOpts, _newOwner)
}

// UserPowerLogAdd is a paid mutator transaction binding the contract method 0xcffc35f6.
//
// Solidity: function userPowerLogAdd(addrDapp address, addrUser address, powerType uint256, powerChange int256, powerNew uint256, reason uint256, param1 uint256) returns()
func (_BokerLog *BokerLogTransactor) UserPowerLogAdd(opts *bind.TransactOpts, addrDapp common.Address, addrUser common.Address, powerType *big.Int, powerChange *big.Int, powerNew *big.Int, reason *big.Int, param1 *big.Int) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "userPowerLogAdd", addrDapp, addrUser, powerType, powerChange, powerNew, reason, param1)
}

// UserPowerLogAdd is a paid mutator transaction binding the contract method 0xcffc35f6.
//
// Solidity: function userPowerLogAdd(addrDapp address, addrUser address, powerType uint256, powerChange int256, powerNew uint256, reason uint256, param1 uint256) returns()
func (_BokerLog *BokerLogSession) UserPowerLogAdd(addrDapp common.Address, addrUser common.Address, powerType *big.Int, powerChange *big.Int, powerNew *big.Int, reason *big.Int, param1 *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.UserPowerLogAdd(&_BokerLog.TransactOpts, addrDapp, addrUser, powerType, powerChange, powerNew, reason, param1)
}

// UserPowerLogAdd is a paid mutator transaction binding the contract method 0xcffc35f6.
//
// Solidity: function userPowerLogAdd(addrDapp address, addrUser address, powerType uint256, powerChange int256, powerNew uint256, reason uint256, param1 uint256) returns()
func (_BokerLog *BokerLogTransactorSession) UserPowerLogAdd(addrDapp common.Address, addrUser common.Address, powerType *big.Int, powerChange *big.Int, powerNew *big.Int, reason *big.Int, param1 *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.UserPowerLogAdd(&_BokerLog.TransactOpts, addrDapp, addrUser, powerType, powerChange, powerNew, reason, param1)
}

// VoteLogAdd is a paid mutator transaction binding the contract method 0xe7f218f2.
//
// Solidity: function voteLogAdd(addrUser address, addrCandidate address, voteType uint256, tokens uint256) returns()
func (_BokerLog *BokerLogTransactor) VoteLogAdd(opts *bind.TransactOpts, addrUser common.Address, addrCandidate common.Address, voteType *big.Int, tokens *big.Int) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "voteLogAdd", addrUser, addrCandidate, voteType, tokens)
}

// VoteLogAdd is a paid mutator transaction binding the contract method 0xe7f218f2.
//
// Solidity: function voteLogAdd(addrUser address, addrCandidate address, voteType uint256, tokens uint256) returns()
func (_BokerLog *BokerLogSession) VoteLogAdd(addrUser common.Address, addrCandidate common.Address, voteType *big.Int, tokens *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.VoteLogAdd(&_BokerLog.TransactOpts, addrUser, addrCandidate, voteType, tokens)
}

// VoteLogAdd is a paid mutator transaction binding the contract method 0xe7f218f2.
//
// Solidity: function voteLogAdd(addrUser address, addrCandidate address, voteType uint256, tokens uint256) returns()
func (_BokerLog *BokerLogTransactorSession) VoteLogAdd(addrUser common.Address, addrCandidate common.Address, voteType *big.Int, tokens *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.VoteLogAdd(&_BokerLog.TransactOpts, addrUser, addrCandidate, voteType, tokens)
}

// VoteRotateLogAdd is a paid mutator transaction binding the contract method 0xc7de6c91.
//
// Solidity: function voteRotateLogAdd(round uint256) returns()
func (_BokerLog *BokerLogTransactor) VoteRotateLogAdd(opts *bind.TransactOpts, round *big.Int) (*types.Transaction, error) {
	return _BokerLog.contract.Transact(opts, "voteRotateLogAdd", round)
}

// VoteRotateLogAdd is a paid mutator transaction binding the contract method 0xc7de6c91.
//
// Solidity: function voteRotateLogAdd(round uint256) returns()
func (_BokerLog *BokerLogSession) VoteRotateLogAdd(round *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.VoteRotateLogAdd(&_BokerLog.TransactOpts, round)
}

// VoteRotateLogAdd is a paid mutator transaction binding the contract method 0xc7de6c91.
//
// Solidity: function voteRotateLogAdd(round uint256) returns()
func (_BokerLog *BokerLogTransactorSession) VoteRotateLogAdd(round *big.Int) (*types.Transaction, error) {
	return _BokerLog.Contract.VoteRotateLogAdd(&_BokerLog.TransactOpts, round)
}
