// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package boker_contract

import (
	"math/big"
	"strings"

	"github.com/Tinachain/Tina/chain/accounts/abi"
	"github.com/Tinachain/Tina/chain/accounts/abi/bind"
	"github.com/Tinachain/Tina/chain/common"
	"github.com/Tinachain/Tina/chain/core/types"
)

// BokerTokenPowerABI is the input ABI used to generate the binding from.
const BokerTokenPowerABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"cName\",\"type\":\"string\"}],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInfoGet\",\"outputs\":[{\"name\":\"tokenAssigned\",\"type\":\"uint256\"},{\"name\":\"tokenToAssign\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uploadGetPower\",\"outputs\":[{\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"globalConfigString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAssignToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrDapp\",\"type\":\"address\"},{\"name\":\"addrFrom\",\"type\":\"address\"},{\"name\":\"eventType\",\"type\":\"uint8\"},{\"name\":\"addrTo\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"eventValue1\",\"type\":\"uint256\"},{\"name\":\"eventValue2\",\"type\":\"uint256\"}],\"name\":\"onUserEvent\",\"outputs\":[{\"name\":\"err\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bokerManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"assignToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"watchGetPower\",\"outputs\":[{\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"globalConfigInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addrManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// BokerTokenPowerBin is the compiled bytecode used for deploying new contracts.
const BokerTokenPowerBin = `60806040526040805190810160405280600581526020017f312e302e3100000000000000000000000000000000000000000000000000000081525060019080519060200190620000519291906200024b565b50426002553480156200006357600080fd5b5060405160208062005e0e8339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000e281620000ea640100000000026401000000009004565b5050620002fa565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663519c28826040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050506040513d60208110156200018057600080fd5b8101908080519060200190929190505050151562000206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f7420426f6b65724d616e616765722100000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028e57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002be578251825591602001919060010190620002a1565b5b509050620002ce9190620002d2565b5090565b620002f791905b80821115620002f3576000816000905550600101620002d9565b5090565b90565b615b04806200030a6000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631eb726af146100e05780632a9394b81461018957806331478cbc146101bb578063378298bc146101fc578063378c085c146102de57806354fd4d501461030d5780635d07fe031461039d57806361dcd7ab1461046d57806366ebc1c6146104985780638da5cb5b146104ef578063a237213c14610546578063ba343cc41461055d578063d0ebdbe71461059e578063d43c8021146105e1578063f2fde38b1461065e575b600080fd5b3480156100ec57600080fd5b50610147600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506106a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019557600080fd5b5061019e61094f565b604051808381526020018281526020019250505060405180910390f35b3480156101c757600080fd5b506101e660048036038101908080359060200190929190505050610a54565b6040518082815260200191505060405180910390f35b34801561020857600080fd5b50610263600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f0e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a3578082015181840152602081019050610288565b50505050905090810190601f1680156102d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ea57600080fd5b506102f361109e565b604051808215151515815260200191505060405180910390f35b34801561031957600080fd5b506103226110be565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610362578082015181840152602081019050610347565b50505050905090810190601f16801561038f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a957600080fd5b50610449600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061115c565b6040518082600681111561045957fe5b60ff16815260200191505060405180910390f35b34801561047957600080fd5b506104826116e5565b6040518082815260200191505060405180910390f35b3480156104a457600080fd5b506104ad6116eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104fb57600080fd5b50610504611711565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055257600080fd5b5061055b611736565b005b34801561056957600080fd5b5061058860048036038101908080359060200190929190505050611df6565b6040518082815260200191505060405180910390f35b3480156105aa57600080fd5b506105df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061255d565b005b3480156105ed57600080fd5b50610648600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506125c4565b6040518082815260200191505060405180910390f35b34801561066a57600080fd5b5061069f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126fe565b005b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca1f3c1846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561074e578082015181840152602081019050610733565b50505050905090810190601f16801561077b5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561079a57600080fd5b505af11580156107ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a08110156107d857600080fd5b810190808051906020019092919080516401000000008111156107fa57600080fd5b8281019050602081018481111561081057600080fd5b815185600182028301116401000000008211171561082d57600080fd5b505092919060200180519060200190929190805164010000000081111561085357600080fd5b8281019050602081018481111561086957600080fd5b815185600182028301116401000000008211171561088657600080fd5b505092919060200180519060200190929190505050505092505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f616464722069732030210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b60008060006109f6620151806109e861099c6040805190810160405280600c81526020017f41737369676e506572696f6400000000000000000000000000000000000000008152506125c4565b6109da6040805190810160405280601381526020017f41737369676e546f6b656e5065724379636c65000000000000000000000000008152506125c4565b61276590919063ffffffff16565b61277b90919063ffffffff16565b9250610a366040805190810160405280601081526020017f41737369676e546f6b656e546f74616c000000000000000000000000000000008152506125c4565b905080831115610a495760009150610a4f565b82810391505b509091565b600080610a956040805190810160405280600e81526020017f55706c6f6164436f756e744d61780000000000000000000000000000000000008152506125c4565b905080831115610aa3578092505b60018310158015610ab5575060018311155b15610ac7576103e8600a029150610f08565b60028310158015610ad9575060028311155b15610aeb576103e86013029150610f08565b60038310158015610afd575060038311155b15610b0f576103e8601b029150610f08565b60048310158015610b21575060048311155b15610b33576103e86022029150610f08565b60058310158015610b45575060058311155b15610b57576103e86029029150610f08565b60068310158015610b69575060068311155b15610b7b576103e8602f029150610f08565b60078310158015610b8d575060078311155b15610b9f576103e86034029150610f08565b60088310158015610bb1575060088311155b15610bc3576103e86039029150610f08565b60098310158015610bd5575060098311155b15610be7576103e8603d029150610f08565b600a8310158015610bf95750600a8311155b15610c0b576103e86041029150610f08565b600b8310158015610c1d5750600b8311155b15610c2f576103e86045029150610f08565b600c8310158015610c415750600c8311155b15610c53576103e86048029150610f08565b600d8310158015610c655750600d8311155b15610c77576103e8604b029150610f08565b600e8310158015610c895750600e8311155b15610c9b576103e8604d029150610f08565b600f8310158015610cad5750600f8311155b15610cbf576103e86050029150610f08565b60108310158015610cd1575060108311155b15610ce3576103e86052029150610f08565b60118310158015610cf5575060118311155b15610d07576103e86054029150610f08565b60128310158015610d19575060128311155b15610d2b576103e86055029150610f08565b60138310158015610d3d575060138311155b15610d4f576103e86057029150610f08565b60148310158015610d61575060148311155b15610d73576103e86058029150610f08565b60158310158015610d85575060158311155b15610d97576103e86059029150610f08565b60168310158015610da9575060168311155b15610dbb576103e8605b029150610f08565b60178310158015610dcd575060188311155b15610ddf576103e8605c029150610f08565b60198310158015610df1575060198311155b15610e03576103e8605d029150610f08565b601a8310158015610e155750601a8311155b15610e27576103e8605e029150610f08565b601b8310158015610e395750601c8311155b15610e4b576103e8605f029150610f08565b601d8310158015610e5d5750601e8311155b15610e6f576103e86060029150610f08565b601f8310158015610e81575060218311155b15610e93576103e86061029150610f08565b60228310158015610ea5575060258311155b15610eb7576103e86062029150610f08565b60268310158015610ec95750602b8311155b15610edb576103e86063029150610f08565b602c8310158015610eed575060328311155b15610eff576103e86064029150610f08565b6103e860000291505b50919050565b6060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a189f35836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fba578082015181840152602081019050610f9f565b50505050905090810190601f168015610fe75780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561104457600080fd5b81019080805164010000000081111561105c57600080fd5b8281019050602081018481111561107257600080fd5b815185600182028301116401000000008211171561108f57600080fd5b50509291905050509050919050565b60006110a86127b6565b156110b657600190506110bb565b600090505b90565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111545780601f1061112957610100808354040283529160200191611154565b820191906000526020600020905b81548152906001019060200180831161113757829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611270578082015181840152602081019050611255565b50505050905090810190601f16801561129d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156112bd57600080fd5b505af11580156112d1573d6000803e3d6000fd5b505050506040513d60208110156112e757600080fd5b8101908080519060200190929190505050806114995750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156114105780820151818401526020810190506113f5565b50505050905090810190601f16801561143d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561145d57600080fd5b505af1158015611471573d6000803e3d6000fd5b505050506040513d602081101561148757600080fd5b81019080805190602001909291905050505b151561150d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b61152c8773ffffffffffffffffffffffffffffffffffffffff166128fc565b8061155257506115518573ffffffffffffffffffffffffffffffffffffffff166128fc565b5b1561156057600190506116da565b60068081111561156c57fe5b86600681111561157857fe5b10151561158857600290506116ad565b85600681111561159457fe5b600060068111156115a157fe5b14156115b9576115b288888761290f565b90506116ac565b8560068111156115c557fe5b600160068111156115d257fe5b14156115e9576115e2888861316d565b90506116ab565b8560068111156115f557fe5b6002600681111561160257fe5b141561161a57611613888887613501565b90506116aa565b85600681111561162657fe5b6003600681111561163357fe5b141561164c57611645888885856139bc565b90506116a9565b85600681111561165857fe5b6004600681111561166557fe5b141561167b5761167487613b03565b90506116a8565b85600681111561168757fe5b6005600681111561169457fe5b14156116a7576116a48888613c0c565b90505b5b5b5b5b5b5b600060068111156116ba57fe5b8160068111156116c657fe5b1415156116d5578090506116da565b600090505b979650505050505050565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611854578082015181840152602081019050611839565b50505050905090810190601f1680156118815780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050506040513d60208110156118cb57600080fd5b810190808051906020019092919050505080611a7d5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d909fb1b6040805190810160405280600881526020017f636f6e7472616374000000000000000000000000000000000000000000000000815250336040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156119f45780820151818401526020810190506119d9565b50505050905090810190601f168015611a215780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611a4157600080fd5b505af1158015611a55573d6000803e3d6000fd5b505050506040513d6020811015611a6b57600080fd5b81019080805190602001909291905050505b1515611af1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420617574686f72697a656421000000000000000000000000000000000081525060200191505060405180910390fd5b611af9613f8c565b611b01614111565b97509750611b0d614289565b95509550611b1d8888888861451c565b611b5b6040805190810160405280601381526020017f426f6b6572546f6b656e506f77657244617461000000000000000000000000008152506106a1565b93508373ffffffffffffffffffffffffffffffffffffffff1663c38ce9f86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611bc157600080fd5b505af1158015611bd5573d6000803e3d6000fd5b505050506040513d6020811015611beb57600080fd5b81019080805190602001909291905050509250611c3c6040805190810160405280600c81526020017f41737369676e506572696f6400000000000000000000000000000000000000008152506125c4565b9150611c6382611c558542614e3290919063ffffffff16565b61276590919063ffffffff16565b90508373ffffffffffffffffffffffffffffffffffffffff1663061a74cd611ca6611c97858561277b90919063ffffffff16565b86614e4b90919063ffffffff16565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611cf857600080fd5b505af1158015611d0c573d6000803e3d6000fd5b50505050611d4e6040805190810160405280600881526020017f426f6b65724c6f670000000000000000000000000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff1663102b3c14898989896040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001848152602001838152602001828152602001945050505050600060405180830381600087803b158015611dd457600080fd5b505af1158015611de8573d6000803e3d6000fd5b505050505050505050505050565b600080611e376040805190810160405280600c81526020017f41737369676e506572696f6400000000000000000000000000000000000000008152506125c4565b905080831115611e45578092505b60018310158015611e57575060018311155b15611e69576103e86001029150612557565b60028310158015611e7b575060028311155b15611e8d576103e86002029150612557565b60038310158015611e9f575060038311155b15611eb1576103e86003029150612557565b60048310158015611ec3575060048311155b15611ed5576103e86004029150612557565b60058310158015611ee7575060058311155b15611ef9576103e86005029150612557565b60068310158015611f0b575060068311155b15611f1d576103e86006029150612557565b60078310158015611f2f575060088311155b15611f41576103e86007029150612557565b60098310158015611f53575060098311155b15611f65576103e86008029150612557565b600a8310158015611f775750600a8311155b15611f89576103e86009029150612557565b600b8310158015611f9b5750600b8311155b15611fad576103e8600a029150612557565b600c8310158015611fbf5750600c8311155b15611fd1576103e8600b029150612557565b600d8310158015611fe35750600e8311155b15611ff5576103e8600c029150612557565b600f83101580156120075750600f8311155b15612019576103e8600d029150612557565b6010831015801561202b575060108311155b1561203d576103e8600e029150612557565b6011831015801561204f575060128311155b15612061576103e8600f029150612557565b60138310158015612073575060138311155b15612085576103e86010029150612557565b60148310158015612097575060158311155b156120a9576103e86011029150612557565b601683101580156120bb575060168311155b156120cd576103e86012029150612557565b601783101580156120df575060188311155b156120f1576103e86013029150612557565b601983101580156121035750601a8311155b15612115576103e86014029150612557565b601b83101580156121275750601b8311155b15612139576103e86015029150612557565b601c831015801561214b5750601d8311155b1561215d576103e86016029150612557565b601e831015801561216f5750601f8311155b15612181576103e86017029150612557565b60208310158015612193575060218311155b156121a5576103e86018029150612557565b602283101580156121b7575060238311155b156121c9576103e86019029150612557565b602483101580156121db575060258311155b156121ed576103e8601a029150612557565b602683101580156121ff575060278311155b15612211576103e8601b029150612557565b60288310158015612223575060298311155b15612235576103e8601c029150612557565b602a83101580156122475750602c8311155b15612259576103e8601d029150612557565b602d831015801561226b5750602e8311155b1561227d576103e8601e029150612557565b602f831015801561228f575060318311155b156122a1576103e8601f029150612557565b603283101580156122b3575060338311155b156122c5576103e86020029150612557565b603483101580156122d7575060368311155b156122e9576103e86021029150612557565b603783101580156122fb575060398311155b1561230d576103e86022029150612557565b603a831015801561231f5750603d8311155b15612331576103e86023029150612557565b603e8310158015612343575060408311155b15612355576103e86024029150612557565b60418310158015612367575060448311155b15612379576103e86025029150612557565b6045831015801561238b575060488311155b1561239d576103e86026029150612557565b604983101580156123af5750604c8311155b156123c1576103e86027029150612557565b604d83101580156123d3575060518311155b156123e5576103e86028029150612557565b605283101580156123f7575060578311155b15612409576103e86029029150612557565b6058831015801561241b5750605d8311155b1561242d576103e8602a029150612557565b605e831015801561243f575060648311155b15612451576103e8602b029150612557565b606583101580156124635750606c8311155b15612475576103e8602c029150612557565b606d8310158015612487575060768311155b15612499576103e8602d029150612557565b607783101580156124ab575060828311155b156124bd576103e8602e029150612557565b608383101580156124cf575060928311155b156124e1576103e8602f029150612557565b609383101580156124f3575060aa8311155b15612505576103e86030029150612557565b60ab8310158015612517575060da8311155b15612529576103e86031029150612557565b60db831015801561253c575061012c8311155b1561254e576103e86032029150612557565b6103e860000291505b50919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125b857600080fd5b6125c181614e69565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633230b078836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612670578082015181840152602081019050612655565b50505050905090810190601f16801561269d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156126bc57600080fd5b505af11580156126d0573d6000803e3d6000fd5b505050506040513d60208110156126e657600080fd5b81019080805190602001909291905050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561275957600080fd5b61276281614fc6565b50565b6000818381151561277257fe5b04905092915050565b600080600084141561279057600091506127af565b82840290508284828115156127a157fe5b041415156127ab57fe5b8091505b5092915050565b6000426128e46127fa6040805190810160405280600c81526020017f41737369676e506572696f6400000000000000000000000000000000000000008152506125c4565b6128386040805190810160405280601381526020017f426f6b6572546f6b656e506f77657244617461000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff1663c38ce9f86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561289b57600080fd5b505af11580156128af573d6000803e3d6000fd5b505050506040513d60208110156128c557600080fd5b8101908080519060200190929190505050614e4b90919063ffffffff16565b1115156128f457600190506128f9565b600090505b90565b600080823b905060008111915050919050565b6000806000806129536040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b925060008373ffffffffffffffffffffffffffffffffffffffff16630b0099c9886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156129f257600080fd5b505af1158015612a06573d6000803e3d6000fd5b505050506040513d6020811015612a1c57600080fd5b81019080805190602001909291905050501115612a3c5760039350613163565b612a7a6040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b91508173ffffffffffffffffffffffffffffffffffffffff1663fe2084ff8888612ad86040805190810160405280601081526020017f5265676973746572506f776572416464000000000000000000000000000000008152506125c4565b6000806040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836009811115612b8057fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b158015612baf57600080fd5b505af1158015612bc3573d6000803e3d6000fd5b5050505060009050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614158015612c3457508573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b156130a3578173ffffffffffffffffffffffffffffffffffffffff1663fe2084ff8888612c956040805190810160405280600f81526020017f496e7669746564506f77657241646400000000000000000000000000000000008152506125c4565b600160006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836009811115612d3e57fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b158015612d6d57600080fd5b505af1158015612d81573d6000803e3d6000fd5b50505050612dc36040805190810160405280600e81526020017f496e76697465436f756e744d61780000000000000000000000000000000000008152506125c4565b8373ffffffffffffffffffffffffffffffffffffffff1663cff86622876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612e5e57600080fd5b505af1158015612e72573d6000803e3d6000fd5b505050506040513d6020811015612e8857600080fd5b810190808051906020019092919050505010156130a257612edd6040805190810160405280600f81526020017f496e7669746f72506f77657241646400000000000000000000000000000000008152506125c4565b90508173ffffffffffffffffffffffffffffffffffffffff1663fe2084ff888784600260006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836009811115612fa757fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b158015612fd657600080fd5b505af1158015612fea573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663f010bb2c866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561308957600080fd5b505af115801561309d573d6000803e3d6000fd5b505050505b5b8273ffffffffffffffffffffffffffffffffffffffff1663ec3ead4887426040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561314657600080fd5b505af115801561315a573d6000803e3d6000fd5b50505050600093505b5050509392505050565b6000806000806131b16040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b92508273ffffffffffffffffffffffffffffffffffffffff1663831e09b7866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561324e57600080fd5b505af1158015613262573d6000803e3d6000fd5b505050506040513d602081101561327857600080fd5b8101908080519060200190929190505050915061329e82426150c090919063ffffffff16565b156132ac57600493506134f8565b6132ea6040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b90508073ffffffffffffffffffffffffffffffffffffffff1663fe2084ff87876133486040805190810160405280601281526020017f4c6f67696e4461696c79506f77657241646400000000000000000000000000008152506125c4565b600360006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018360098111156133f157fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b15801561342057600080fd5b505af1158015613434573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16638c9db12b86426040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156134db57600080fd5b505af11580156134ef573d6000803e3d6000fd5b50505050600093505b50505092915050565b6000806000806135456040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b925060008373ffffffffffffffffffffffffffffffffffffffff1663c1ffc01b88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561361857600080fd5b505af115801561362c573d6000803e3d6000fd5b505050506040513d602081101561364257600080fd5b8101908080519060200190929190505050111561366257600593506139b2565b6136a06040805190810160405280601381526020017f426f6b6572546f6b656e506f77657244617461000000000000000000000000008152506106a1565b91506136e06040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b90508073ffffffffffffffffffffffffffffffffffffffff1663fe2084ff88888573ffffffffffffffffffffffffffffffffffffffff1663978100918a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561379b57600080fd5b505af11580156137af573d6000803e3d6000fd5b505050506040513d60208110156137c557600080fd5b8101908080519060200190929190505050600460006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183600981111561387f57fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b1580156138ae57600080fd5b505af11580156138c2573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663055a7f3287876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561399557600080fd5b505af11580156139a9573d6000803e3d6000fd5b50505050600093505b5050509392505050565b6000806139fd6040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b90508073ffffffffffffffffffffffffffffffffffffffff1663da34ee72878787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050600060405180830381600087803b158015613ade57600080fd5b505af1158015613af2573d6000803e3d6000fd5b505050506000915050949350505050565b600080613b446040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b90508073ffffffffffffffffffffffffffffffffffffffff1663cb0d72318460016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613bea57600080fd5b505af1158015613bfe573d6000803e3d6000fd5b505050506000915050919050565b6000806000613c4f6040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b915060008273ffffffffffffffffffffffffffffffffffffffff16631ec622d3866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613cee57600080fd5b505af1158015613d02573d6000803e3d6000fd5b505050506040513d6020811015613d1857600080fd5b81019080805190602001909291905050501115613d385760069250613f84565b613d766040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b90508073ffffffffffffffffffffffffffffffffffffffff1663fe2084ff8686613dd46040805190810160405280601581526020017f43657274696669636174696f6e506f77657241646400000000000000000000008152506125c4565b600560006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836009811115613e7d57fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b158015613eac57600080fd5b505af1158015613ec0573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16639bf6a20885426040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613f6757600080fd5b505af1158015613f7b573d6000803e3d6000fd5b50505050600092505b505092915050565b6060600080613fcf6040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff1663a591efde6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561403257600080fd5b505af1158015614046573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561407057600080fd5b81019080805164010000000081111561408857600080fd5b8281019050602081018481111561409e57600080fd5b81518560208202830111640100000000821117156140bb57600080fd5b50509291905050509250600091505b825182101561410c5782828151811015156140e157fe5b9060200190602002015190506140f681615166565b6140ff8161584e565b81806001019250506140ca565b505050565b60008060006141546040805190810160405280601381526020017f41737369676e546f6b656e5065724379636c65000000000000000000000000008152506125c4565b9050806141956040805190810160405280600c81526020017f426f6b657246696e616e636500000000000000000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff1631101561420a576141f06040805190810160405280600c81526020017f426f6b657246696e616e636500000000000000000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff163190505b61426d606461425f6142506040805190810160405280601881526020017f41737369676e546f6b656e4c6f6e677465726d526174696f00000000000000008152506125c4565b8461277b90919063ffffffff16565b61276590919063ffffffff16565b92506142828382614e3290919063ffffffff16565b9150509091565b6000806000606060008060006142d36040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b945060009650600095508473ffffffffffffffffffffffffffffffffffffffff1663a591efde6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561434157600080fd5b505af1158015614355573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561437f57600080fd5b81019080805164010000000081111561439757600080fd5b828101905060208101848111156143ad57600080fd5b81518560208202830111640100000000821117156143ca57600080fd5b50509291905050509350600092505b8351831015614513578473ffffffffffffffffffffffffffffffffffffffff166302931e59858581518110151561440c57fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b15801561449357600080fd5b505af11580156144a7573d6000803e3d6000fd5b505050506040513d60408110156144bd57600080fd5b810190808051906020019092919080519060200190929190505050915091506144ef8288614e4b90919063ffffffff16565b96506145048187614e4b90919063ffffffff16565b955082806001019350506143d9565b50505050509091565b60008060606000806000806145656040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b96506145a56040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b95508673ffffffffffffffffffffffffffffffffffffffff1663a591efde6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561460b57600080fd5b505af115801561461f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561464957600080fd5b81019080805164010000000081111561466157600080fd5b8281019050602081018481111561467757600080fd5b815185602082028301116401000000008211171561469457600080fd5b50509291905050509450600093505b8451841015614e25578673ffffffffffffffffffffffffffffffffffffffff166302931e5986868151811015156146d657fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b15801561475d57600080fd5b505af1158015614771573d6000803e3d6000fd5b505050506040513d604081101561478757600080fd5b810190808051906020019092919080519060200190929190505050925092506000905060008b1180156147ba5750600089115b156147f9576147f66147e78a6147d9868f61277b90919063ffffffff16565b61276590919063ffffffff16565b82614e4b90919063ffffffff16565b90505b60008a1180156148095750600088115b156148485761484561483689614828858e61277b90919063ffffffff16565b61276590919063ffffffff16565b82614e4b90919063ffffffff16565b90505b8573ffffffffffffffffffffffffffffffffffffffff16630fecd2b96000878781518110151561487457fe5b90602001906020020151600960006040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600981111561492157fe5b60ff168152602001828152602001945050505050600060405180830381600087803b15801561494f57600080fd5b505af1158015614963573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff16632ad04f7a868681518110151561499157fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015614a1957600080fd5b505af1158015614a2d573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff16635be3c4bd8686815181101515614a5b57fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015614ae357600080fd5b505af1158015614af7573d6000803e3d6000fd5b50505050600081118015614b3e5750614b3c8585815181101515614b1757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166128fc565b155b15614e1857614b816040805190810160405280600c81526020017f426f6b657246696e616e636500000000000000000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff1663f4d2cbb48686815181101515614baa57fe5b906020019060200201518360026007811115614bc257fe5b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b158015614c4e57600080fd5b505af1158015614c62573d6000803e3d6000fd5b50505050614ca46040805190810160405280601381526020017f426f6b6572546f6b656e506f77657244617461000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff16633fe59a8c614dad614d006040805190810160405280601381526020017f426f6b6572546f6b656e506f77657244617461000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff16636b3ee14a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614d6357600080fd5b505af1158015614d77573d6000803e3d6000fd5b505050506040513d6020811015614d8d57600080fd5b810190808051906020019092919050505084614e4b90919063ffffffff16565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015614dff57600080fd5b505af1158015614e13573d6000803e3d6000fd5b505050505b83806001019450506146a3565b5050505050505050505050565b6000828211151515614e4057fe5b818303905092915050565b6000808284019050838110151515614e5f57fe5b8091505092915050565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663519c28826040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614ed257600080fd5b505af1158015614ee6573d6000803e3d6000fd5b505050506040513d6020811015614efc57600080fd5b81019080805190602001909291905050501515614f81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f7420426f6b65724d616e616765722100000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561500257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060006150de610e10600861277b90919063ffffffff16565b93506150f6610e10601861277b90919063ffffffff16565b925061511d8361510f868a614e4b90919063ffffffff16565b61276590919063ffffffff16565b9150615144836151368689614e4b90919063ffffffff16565b61276590919063ffffffff16565b905080821415615157576001945061515c565b600094505b5050505092915050565b600080606080606060008060008060008060006151b76040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b9b508b73ffffffffffffffffffffffffffffffffffffffff1663e83c05648e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561525457600080fd5b505af1158015615268573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250608081101561529257600080fd5b810190808051906020019092919080516401000000008111156152b457600080fd5b828101905060208101848111156152ca57600080fd5b81518560208202830111640100000000821117156152e757600080fd5b5050929190602001805164010000000081111561530357600080fd5b8281019050602081018481111561531957600080fd5b815185602082028301116401000000008211171561533657600080fd5b5050929190602001805164010000000081111561535257600080fd5b8281019050602081018481111561536857600080fd5b815185602082028301116401000000008211171561538557600080fd5b50509291905050509a509a509a509a506153d36040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b96506153de8b611df6565b9550600094505b885185101561583f5761542a8b61541c888b8981518110151561540457fe5b9060200190602002015161277b90919063ffffffff16565b61276590919063ffffffff16565b935061548f60646154816154726040805190810160405280601481526020017f506f77657257617463684f776e6572526174696f0000000000000000000000008152506125c4565b8761277b90919063ffffffff16565b61276590919063ffffffff16565b92506154a48385614e3290919063ffffffff16565b91506154e46040805190810160405280600d81526020017f426f6b657246696c6544617461000000000000000000000000000000000000008152506106a1565b73ffffffffffffffffffffffffffffffffffffffff16632903291a8a8781518110151561550d57fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561556957600080fd5b505af115801561557d573d6000803e3d6000fd5b505050506040513d602081101561559357600080fd5b8101908080519060200190929190505050905060008311156156ec578673ffffffffffffffffffffffffffffffffffffffff1663844245098b878151811015156155d957fe5b90602001906020020151838660078e8b8151811015156155f557fe5b906020019060200201516040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018360098111156156a457fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b1580156156d357600080fd5b505af11580156156e7573d6000803e3d6000fd5b505050505b6000821115615832578673ffffffffffffffffffffffffffffffffffffffff1663844245098b8781518110151561571f57fe5b906020019060200201518f8560068e8b81518110151561573b57fe5b906020019060200201516040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018360098111156157ea57fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b15801561581957600080fd5b505af115801561582d573d6000803e3d6000fd5b505050505b84806001019550506153e5565b50505050505050505050505050565b6000806000806158926040805190810160405280600d81526020017f426f6b65725573657244617461000000000000000000000000000000000000008152506106a1565b93506158d26040805190810160405280600981526020017f426f6b65725573657200000000000000000000000000000000000000000000008152506106a1565b92508373ffffffffffffffffffffffffffffffffffffffff166302f08234866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561596f57600080fd5b505af1158015615983573d6000803e3d6000fd5b505050506040513d602081101561599957600080fd5b810190808051906020019092919050505091506159b582610a54565b90506000811115615ad1578273ffffffffffffffffffffffffffffffffffffffff16638442450960008784600860006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836009811115615a8957fe5b60ff16815260200182815260200195505050505050600060405180830381600087803b158015615ab857600080fd5b505af1158015615acc573d6000803e3d6000fd5b505050505b50505050505600a165627a7a72305820fa32a506266be5ce8451b1ad236bc09d7ba23a5b2aede86e2c3d32e8e52da3100029`

// DeployBokerTokenPower deploys a new Ethereum contract, binding an instance of BokerTokenPower to it.
func DeployBokerTokenPower(auth *bind.TransactOpts, backend bind.ContractBackend, addrManager common.Address) (common.Address, *types.Transaction, *BokerTokenPower, error) {
	parsed, err := abi.JSON(strings.NewReader(BokerTokenPowerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BokerTokenPowerBin), backend, addrManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BokerTokenPower{BokerTokenPowerCaller: BokerTokenPowerCaller{contract: contract}, BokerTokenPowerTransactor: BokerTokenPowerTransactor{contract: contract}}, nil
}

// BokerTokenPower is an auto generated Go binding around an Ethereum contract.
type BokerTokenPower struct {
	BokerTokenPowerCaller     // Read-only binding to the contract
	BokerTokenPowerTransactor // Write-only binding to the contract
}

// BokerTokenPowerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BokerTokenPowerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BokerTokenPowerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BokerTokenPowerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BokerTokenPowerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BokerTokenPowerSession struct {
	Contract     *BokerTokenPower  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BokerTokenPowerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BokerTokenPowerCallerSession struct {
	Contract *BokerTokenPowerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BokerTokenPowerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BokerTokenPowerTransactorSession struct {
	Contract     *BokerTokenPowerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BokerTokenPowerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BokerTokenPowerRaw struct {
	Contract *BokerTokenPower // Generic contract binding to access the raw methods on
}

// BokerTokenPowerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BokerTokenPowerCallerRaw struct {
	Contract *BokerTokenPowerCaller // Generic read-only contract binding to access the raw methods on
}

// BokerTokenPowerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BokerTokenPowerTransactorRaw struct {
	Contract *BokerTokenPowerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBokerTokenPower creates a new instance of BokerTokenPower, bound to a specific deployed contract.
func NewBokerTokenPower(address common.Address, backend bind.ContractBackend) (*BokerTokenPower, error) {
	contract, err := bindBokerTokenPower(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BokerTokenPower{BokerTokenPowerCaller: BokerTokenPowerCaller{contract: contract}, BokerTokenPowerTransactor: BokerTokenPowerTransactor{contract: contract}}, nil
}

// NewBokerTokenPowerCaller creates a new read-only instance of BokerTokenPower, bound to a specific deployed contract.
func NewBokerTokenPowerCaller(address common.Address, caller bind.ContractCaller) (*BokerTokenPowerCaller, error) {
	contract, err := bindBokerTokenPower(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &BokerTokenPowerCaller{contract: contract}, nil
}

// NewBokerTokenPowerTransactor creates a new write-only instance of BokerTokenPower, bound to a specific deployed contract.
func NewBokerTokenPowerTransactor(address common.Address, transactor bind.ContractTransactor) (*BokerTokenPowerTransactor, error) {
	contract, err := bindBokerTokenPower(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &BokerTokenPowerTransactor{contract: contract}, nil
}

// bindBokerTokenPower binds a generic wrapper to an already deployed contract.
func bindBokerTokenPower(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BokerTokenPowerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BokerTokenPower *BokerTokenPowerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BokerTokenPower.Contract.BokerTokenPowerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BokerTokenPower *BokerTokenPowerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.BokerTokenPowerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BokerTokenPower *BokerTokenPowerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.BokerTokenPowerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BokerTokenPower *BokerTokenPowerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BokerTokenPower.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BokerTokenPower *BokerTokenPowerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BokerTokenPower *BokerTokenPowerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.contract.Transact(opts, method, params...)
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerTokenPower *BokerTokenPowerCaller) BokerManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "bokerManager")
	return *ret0, err
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerTokenPower *BokerTokenPowerSession) BokerManager() (common.Address, error) {
	return _BokerTokenPower.Contract.BokerManager(&_BokerTokenPower.CallOpts)
}

// BokerManager is a free data retrieval call binding the contract method 0x66ebc1c6.
//
// Solidity: function bokerManager() constant returns(address)
func (_BokerTokenPower *BokerTokenPowerCallerSession) BokerManager() (common.Address, error) {
	return _BokerTokenPower.Contract.BokerManager(&_BokerTokenPower.CallOpts)
}

// CheckAssignToken is a free data retrieval call binding the contract method 0x378c085c.
//
// Solidity: function checkAssignToken() constant returns(bool)
func (_BokerTokenPower *BokerTokenPowerCaller) CheckAssignToken(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "checkAssignToken")
	return *ret0, err
}

// CheckAssignToken is a free data retrieval call binding the contract method 0x378c085c.
//
// Solidity: function checkAssignToken() constant returns(bool)
func (_BokerTokenPower *BokerTokenPowerSession) CheckAssignToken() (bool, error) {
	return _BokerTokenPower.Contract.CheckAssignToken(&_BokerTokenPower.CallOpts)
}

// CheckAssignToken is a free data retrieval call binding the contract method 0x378c085c.
//
// Solidity: function checkAssignToken() constant returns(bool)
func (_BokerTokenPower *BokerTokenPowerCallerSession) CheckAssignToken() (bool, error) {
	return _BokerTokenPower.Contract.CheckAssignToken(&_BokerTokenPower.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerTokenPower *BokerTokenPowerCaller) ContractAddress(opts *bind.CallOpts, cName string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "contractAddress", cName)
	return *ret0, err
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerTokenPower *BokerTokenPowerSession) ContractAddress(cName string) (common.Address, error) {
	return _BokerTokenPower.Contract.ContractAddress(&_BokerTokenPower.CallOpts, cName)
}

// ContractAddress is a free data retrieval call binding the contract method 0x1eb726af.
//
// Solidity: function contractAddress(cName string) constant returns(address)
func (_BokerTokenPower *BokerTokenPowerCallerSession) ContractAddress(cName string) (common.Address, error) {
	return _BokerTokenPower.Contract.ContractAddress(&_BokerTokenPower.CallOpts, cName)
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerTokenPower *BokerTokenPowerCaller) CreateTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "createTime")
	return *ret0, err
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerTokenPower *BokerTokenPowerSession) CreateTime() (*big.Int, error) {
	return _BokerTokenPower.Contract.CreateTime(&_BokerTokenPower.CallOpts)
}

// CreateTime is a free data retrieval call binding the contract method 0x61dcd7ab.
//
// Solidity: function createTime() constant returns(uint256)
func (_BokerTokenPower *BokerTokenPowerCallerSession) CreateTime() (*big.Int, error) {
	return _BokerTokenPower.Contract.CreateTime(&_BokerTokenPower.CallOpts)
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerTokenPower *BokerTokenPowerCaller) GlobalConfigInt(opts *bind.CallOpts, key string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "globalConfigInt", key)
	return *ret0, err
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerTokenPower *BokerTokenPowerSession) GlobalConfigInt(key string) (*big.Int, error) {
	return _BokerTokenPower.Contract.GlobalConfigInt(&_BokerTokenPower.CallOpts, key)
}

// GlobalConfigInt is a free data retrieval call binding the contract method 0xd43c8021.
//
// Solidity: function globalConfigInt(key string) constant returns(uint256)
func (_BokerTokenPower *BokerTokenPowerCallerSession) GlobalConfigInt(key string) (*big.Int, error) {
	return _BokerTokenPower.Contract.GlobalConfigInt(&_BokerTokenPower.CallOpts, key)
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerTokenPower *BokerTokenPowerCaller) GlobalConfigString(opts *bind.CallOpts, key string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "globalConfigString", key)
	return *ret0, err
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerTokenPower *BokerTokenPowerSession) GlobalConfigString(key string) (string, error) {
	return _BokerTokenPower.Contract.GlobalConfigString(&_BokerTokenPower.CallOpts, key)
}

// GlobalConfigString is a free data retrieval call binding the contract method 0x378298bc.
//
// Solidity: function globalConfigString(key string) constant returns(string)
func (_BokerTokenPower *BokerTokenPowerCallerSession) GlobalConfigString(key string) (string, error) {
	return _BokerTokenPower.Contract.GlobalConfigString(&_BokerTokenPower.CallOpts, key)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerTokenPower *BokerTokenPowerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerTokenPower *BokerTokenPowerSession) Owner() (common.Address, error) {
	return _BokerTokenPower.Contract.Owner(&_BokerTokenPower.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BokerTokenPower *BokerTokenPowerCallerSession) Owner() (common.Address, error) {
	return _BokerTokenPower.Contract.Owner(&_BokerTokenPower.CallOpts)
}

// TokenInfoGet is a free data retrieval call binding the contract method 0x2a9394b8.
//
// Solidity: function tokenInfoGet() constant returns(tokenAssigned uint256, tokenToAssign uint256)
func (_BokerTokenPower *BokerTokenPowerCaller) TokenInfoGet(opts *bind.CallOpts) (struct {
	TokenAssigned *big.Int
	TokenToAssign *big.Int
}, error) {
	ret := new(struct {
		TokenAssigned *big.Int
		TokenToAssign *big.Int
	})
	out := ret
	err := _BokerTokenPower.contract.Call(opts, out, "tokenInfoGet")
	return *ret, err
}

// TokenInfoGet is a free data retrieval call binding the contract method 0x2a9394b8.
//
// Solidity: function tokenInfoGet() constant returns(tokenAssigned uint256, tokenToAssign uint256)
func (_BokerTokenPower *BokerTokenPowerSession) TokenInfoGet() (struct {
	TokenAssigned *big.Int
	TokenToAssign *big.Int
}, error) {
	return _BokerTokenPower.Contract.TokenInfoGet(&_BokerTokenPower.CallOpts)
}

// TokenInfoGet is a free data retrieval call binding the contract method 0x2a9394b8.
//
// Solidity: function tokenInfoGet() constant returns(tokenAssigned uint256, tokenToAssign uint256)
func (_BokerTokenPower *BokerTokenPowerCallerSession) TokenInfoGet() (struct {
	TokenAssigned *big.Int
	TokenToAssign *big.Int
}, error) {
	return _BokerTokenPower.Contract.TokenInfoGet(&_BokerTokenPower.CallOpts)
}

// UploadGetPower is a free data retrieval call binding the contract method 0x31478cbc.
//
// Solidity: function uploadGetPower(value uint256) constant returns(power uint256)
func (_BokerTokenPower *BokerTokenPowerCaller) UploadGetPower(opts *bind.CallOpts, value *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "uploadGetPower", value)
	return *ret0, err
}

// UploadGetPower is a free data retrieval call binding the contract method 0x31478cbc.
//
// Solidity: function uploadGetPower(value uint256) constant returns(power uint256)
func (_BokerTokenPower *BokerTokenPowerSession) UploadGetPower(value *big.Int) (*big.Int, error) {
	return _BokerTokenPower.Contract.UploadGetPower(&_BokerTokenPower.CallOpts, value)
}

// UploadGetPower is a free data retrieval call binding the contract method 0x31478cbc.
//
// Solidity: function uploadGetPower(value uint256) constant returns(power uint256)
func (_BokerTokenPower *BokerTokenPowerCallerSession) UploadGetPower(value *big.Int) (*big.Int, error) {
	return _BokerTokenPower.Contract.UploadGetPower(&_BokerTokenPower.CallOpts, value)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerTokenPower *BokerTokenPowerCaller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerTokenPower *BokerTokenPowerSession) Version() (string, error) {
	return _BokerTokenPower.Contract.Version(&_BokerTokenPower.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_BokerTokenPower *BokerTokenPowerCallerSession) Version() (string, error) {
	return _BokerTokenPower.Contract.Version(&_BokerTokenPower.CallOpts)
}

// WatchGetPower is a free data retrieval call binding the contract method 0xba343cc4.
//
// Solidity: function watchGetPower(value uint256) constant returns(power uint256)
func (_BokerTokenPower *BokerTokenPowerCaller) WatchGetPower(opts *bind.CallOpts, value *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BokerTokenPower.contract.Call(opts, out, "watchGetPower", value)
	return *ret0, err
}

// WatchGetPower is a free data retrieval call binding the contract method 0xba343cc4.
//
// Solidity: function watchGetPower(value uint256) constant returns(power uint256)
func (_BokerTokenPower *BokerTokenPowerSession) WatchGetPower(value *big.Int) (*big.Int, error) {
	return _BokerTokenPower.Contract.WatchGetPower(&_BokerTokenPower.CallOpts, value)
}

// WatchGetPower is a free data retrieval call binding the contract method 0xba343cc4.
//
// Solidity: function watchGetPower(value uint256) constant returns(power uint256)
func (_BokerTokenPower *BokerTokenPowerCallerSession) WatchGetPower(value *big.Int) (*big.Int, error) {
	return _BokerTokenPower.Contract.WatchGetPower(&_BokerTokenPower.CallOpts, value)
}

// AssignToken is a paid mutator transaction binding the contract method 0xa237213c.
//
// Solidity: function assignToken() returns()
func (_BokerTokenPower *BokerTokenPowerTransactor) AssignToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BokerTokenPower.contract.Transact(opts, "assignToken")
}

// AssignToken is a paid mutator transaction binding the contract method 0xa237213c.
//
// Solidity: function assignToken() returns()
func (_BokerTokenPower *BokerTokenPowerSession) AssignToken() (*types.Transaction, error) {
	return _BokerTokenPower.Contract.AssignToken(&_BokerTokenPower.TransactOpts)
}

// AssignToken is a paid mutator transaction binding the contract method 0xa237213c.
//
// Solidity: function assignToken() returns()
func (_BokerTokenPower *BokerTokenPowerTransactorSession) AssignToken() (*types.Transaction, error) {
	return _BokerTokenPower.Contract.AssignToken(&_BokerTokenPower.TransactOpts)
}

// OnUserEvent is a paid mutator transaction binding the contract method 0x5d07fe03.
//
// Solidity: function onUserEvent(addrDapp address, addrFrom address, eventType uint8, addrTo address, timestamp uint256, eventValue1 uint256, eventValue2 uint256) returns(err uint8)
func (_BokerTokenPower *BokerTokenPowerTransactor) OnUserEvent(opts *bind.TransactOpts, addrDapp common.Address, addrFrom common.Address, eventType uint8, addrTo common.Address, timestamp *big.Int, eventValue1 *big.Int, eventValue2 *big.Int) (*types.Transaction, error) {
	return _BokerTokenPower.contract.Transact(opts, "onUserEvent", addrDapp, addrFrom, eventType, addrTo, timestamp, eventValue1, eventValue2)
}

// OnUserEvent is a paid mutator transaction binding the contract method 0x5d07fe03.
//
// Solidity: function onUserEvent(addrDapp address, addrFrom address, eventType uint8, addrTo address, timestamp uint256, eventValue1 uint256, eventValue2 uint256) returns(err uint8)
func (_BokerTokenPower *BokerTokenPowerSession) OnUserEvent(addrDapp common.Address, addrFrom common.Address, eventType uint8, addrTo common.Address, timestamp *big.Int, eventValue1 *big.Int, eventValue2 *big.Int) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.OnUserEvent(&_BokerTokenPower.TransactOpts, addrDapp, addrFrom, eventType, addrTo, timestamp, eventValue1, eventValue2)
}

// OnUserEvent is a paid mutator transaction binding the contract method 0x5d07fe03.
//
// Solidity: function onUserEvent(addrDapp address, addrFrom address, eventType uint8, addrTo address, timestamp uint256, eventValue1 uint256, eventValue2 uint256) returns(err uint8)
func (_BokerTokenPower *BokerTokenPowerTransactorSession) OnUserEvent(addrDapp common.Address, addrFrom common.Address, eventType uint8, addrTo common.Address, timestamp *big.Int, eventValue1 *big.Int, eventValue2 *big.Int) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.OnUserEvent(&_BokerTokenPower.TransactOpts, addrDapp, addrFrom, eventType, addrTo, timestamp, eventValue1, eventValue2)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerTokenPower *BokerTokenPowerTransactor) SetManager(opts *bind.TransactOpts, addrManager common.Address) (*types.Transaction, error) {
	return _BokerTokenPower.contract.Transact(opts, "setManager", addrManager)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerTokenPower *BokerTokenPowerSession) SetManager(addrManager common.Address) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.SetManager(&_BokerTokenPower.TransactOpts, addrManager)
}

// SetManager is a paid mutator transaction binding the contract method 0xd0ebdbe7.
//
// Solidity: function setManager(addrManager address) returns()
func (_BokerTokenPower *BokerTokenPowerTransactorSession) SetManager(addrManager common.Address) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.SetManager(&_BokerTokenPower.TransactOpts, addrManager)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerTokenPower *BokerTokenPowerTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _BokerTokenPower.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerTokenPower *BokerTokenPowerSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.TransferOwnership(&_BokerTokenPower.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_BokerTokenPower *BokerTokenPowerTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _BokerTokenPower.Contract.TransferOwnership(&_BokerTokenPower.TransactOpts, _newOwner)
}
